package com.ant.open.rpc.thrift.gen; /**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class JourneyThrift implements org.apache.thrift.TBase<JourneyThrift, JourneyThrift._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("JourneyThrift");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userId", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField ORIGIN_FIELD_DESC = new org.apache.thrift.protocol.TField("origin", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField DESTINATION_FIELD_DESC = new org.apache.thrift.protocol.TField("destination", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField TRIP_MODE_FIELD_DESC = new org.apache.thrift.protocol.TField("tripMode", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField START_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("startDate", org.apache.thrift.protocol.TType.I64, (short)6);
  private static final org.apache.thrift.protocol.TField DAY_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("dayCount", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField PARTNER_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("partnerCount", org.apache.thrift.protocol.TType.I32, (short)8);
  private static final org.apache.thrift.protocol.TField HAS_MALE_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("hasMaleCount", org.apache.thrift.protocol.TType.I32, (short)9);
  private static final org.apache.thrift.protocol.TField HAS_FEMALE_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("hasFemaleCount", org.apache.thrift.protocol.TType.I32, (short)10);
  private static final org.apache.thrift.protocol.TField NEED_MALE_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("needMaleCount", org.apache.thrift.protocol.TType.I32, (short)11);
  private static final org.apache.thrift.protocol.TField NEED_FEMALE_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("needFemaleCount", org.apache.thrift.protocol.TType.I32, (short)12);
  private static final org.apache.thrift.protocol.TField DETAIL_FIELD_DESC = new org.apache.thrift.protocol.TField("detail", org.apache.thrift.protocol.TType.STRING, (short)13);
  private static final org.apache.thrift.protocol.TField COLLECT_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("collectCount", org.apache.thrift.protocol.TType.I32, (short)14);
  private static final org.apache.thrift.protocol.TField UP_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("upCount", org.apache.thrift.protocol.TType.I32, (short)15);
  private static final org.apache.thrift.protocol.TField SHARE_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("shareCount", org.apache.thrift.protocol.TType.I32, (short)16);
  private static final org.apache.thrift.protocol.TField COMMENT_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("commentCount", org.apache.thrift.protocol.TType.I32, (short)17);
  private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.I32, (short)18);
  private static final org.apache.thrift.protocol.TField CREATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("createTime", org.apache.thrift.protocol.TType.I64, (short)19);
  private static final org.apache.thrift.protocol.TField UPDATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("updateTime", org.apache.thrift.protocol.TType.I64, (short)20);
  private static final org.apache.thrift.protocol.TField SEX_LIMIT_FIELD_DESC = new org.apache.thrift.protocol.TField("sexLimit", org.apache.thrift.protocol.TType.I32, (short)21);
  private static final org.apache.thrift.protocol.TField PUBLIC_PHONE_FIELD_DESC = new org.apache.thrift.protocol.TField("publicPhone", org.apache.thrift.protocol.TType.I32, (short)22);
  private static final org.apache.thrift.protocol.TField PUBLIC_WECHAT_FIELD_DESC = new org.apache.thrift.protocol.TField("publicWechat", org.apache.thrift.protocol.TType.I32, (short)23);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new JourneyThriftStandardSchemeFactory());
    schemes.put(TupleScheme.class, new JourneyThriftTupleSchemeFactory());
  }

  public int id; // required
  public int userId; // required
  public String origin; // required
  public String destination; // required
  public String tripMode; // required
  public long startDate; // required
  public int dayCount; // required
  public int partnerCount; // required
  public int hasMaleCount; // required
  public int hasFemaleCount; // required
  public int needMaleCount; // required
  public int needFemaleCount; // required
  public String detail; // required
  public int collectCount; // required
  public int upCount; // required
  public int shareCount; // required
  public int commentCount; // required
  public int status; // required
  public long createTime; // required
  public long updateTime; // required
  public int sexLimit; // required
  public int publicPhone; // required
  public int publicWechat; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    USER_ID((short)2, "userId"),
    ORIGIN((short)3, "origin"),
    DESTINATION((short)4, "destination"),
    TRIP_MODE((short)5, "tripMode"),
    START_DATE((short)6, "startDate"),
    DAY_COUNT((short)7, "dayCount"),
    PARTNER_COUNT((short)8, "partnerCount"),
    HAS_MALE_COUNT((short)9, "hasMaleCount"),
    HAS_FEMALE_COUNT((short)10, "hasFemaleCount"),
    NEED_MALE_COUNT((short)11, "needMaleCount"),
    NEED_FEMALE_COUNT((short)12, "needFemaleCount"),
    DETAIL((short)13, "detail"),
    COLLECT_COUNT((short)14, "collectCount"),
    UP_COUNT((short)15, "upCount"),
    SHARE_COUNT((short)16, "shareCount"),
    COMMENT_COUNT((short)17, "commentCount"),
    STATUS((short)18, "status"),
    CREATE_TIME((short)19, "createTime"),
    UPDATE_TIME((short)20, "updateTime"),
    SEX_LIMIT((short)21, "sexLimit"),
    PUBLIC_PHONE((short)22, "publicPhone"),
    PUBLIC_WECHAT((short)23, "publicWechat");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // USER_ID
          return USER_ID;
        case 3: // ORIGIN
          return ORIGIN;
        case 4: // DESTINATION
          return DESTINATION;
        case 5: // TRIP_MODE
          return TRIP_MODE;
        case 6: // START_DATE
          return START_DATE;
        case 7: // DAY_COUNT
          return DAY_COUNT;
        case 8: // PARTNER_COUNT
          return PARTNER_COUNT;
        case 9: // HAS_MALE_COUNT
          return HAS_MALE_COUNT;
        case 10: // HAS_FEMALE_COUNT
          return HAS_FEMALE_COUNT;
        case 11: // NEED_MALE_COUNT
          return NEED_MALE_COUNT;
        case 12: // NEED_FEMALE_COUNT
          return NEED_FEMALE_COUNT;
        case 13: // DETAIL
          return DETAIL;
        case 14: // COLLECT_COUNT
          return COLLECT_COUNT;
        case 15: // UP_COUNT
          return UP_COUNT;
        case 16: // SHARE_COUNT
          return SHARE_COUNT;
        case 17: // COMMENT_COUNT
          return COMMENT_COUNT;
        case 18: // STATUS
          return STATUS;
        case 19: // CREATE_TIME
          return CREATE_TIME;
        case 20: // UPDATE_TIME
          return UPDATE_TIME;
        case 21: // SEX_LIMIT
          return SEX_LIMIT;
        case 22: // PUBLIC_PHONE
          return PUBLIC_PHONE;
        case 23: // PUBLIC_WECHAT
          return PUBLIC_WECHAT;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private static final int __USERID_ISSET_ID = 1;
  private static final int __STARTDATE_ISSET_ID = 2;
  private static final int __DAYCOUNT_ISSET_ID = 3;
  private static final int __PARTNERCOUNT_ISSET_ID = 4;
  private static final int __HASMALECOUNT_ISSET_ID = 5;
  private static final int __HASFEMALECOUNT_ISSET_ID = 6;
  private static final int __NEEDMALECOUNT_ISSET_ID = 7;
  private static final int __NEEDFEMALECOUNT_ISSET_ID = 8;
  private static final int __COLLECTCOUNT_ISSET_ID = 9;
  private static final int __UPCOUNT_ISSET_ID = 10;
  private static final int __SHARECOUNT_ISSET_ID = 11;
  private static final int __COMMENTCOUNT_ISSET_ID = 12;
  private static final int __STATUS_ISSET_ID = 13;
  private static final int __CREATETIME_ISSET_ID = 14;
  private static final int __UPDATETIME_ISSET_ID = 15;
  private static final int __SEXLIMIT_ISSET_ID = 16;
  private static final int __PUBLICPHONE_ISSET_ID = 17;
  private static final int __PUBLICWECHAT_ISSET_ID = 18;
  private int __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ORIGIN, new org.apache.thrift.meta_data.FieldMetaData("origin", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DESTINATION, new org.apache.thrift.meta_data.FieldMetaData("destination", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TRIP_MODE, new org.apache.thrift.meta_data.FieldMetaData("tripMode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.START_DATE, new org.apache.thrift.meta_data.FieldMetaData("startDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.DAY_COUNT, new org.apache.thrift.meta_data.FieldMetaData("dayCount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PARTNER_COUNT, new org.apache.thrift.meta_data.FieldMetaData("partnerCount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.HAS_MALE_COUNT, new org.apache.thrift.meta_data.FieldMetaData("hasMaleCount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.HAS_FEMALE_COUNT, new org.apache.thrift.meta_data.FieldMetaData("hasFemaleCount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.NEED_MALE_COUNT, new org.apache.thrift.meta_data.FieldMetaData("needMaleCount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.NEED_FEMALE_COUNT, new org.apache.thrift.meta_data.FieldMetaData("needFemaleCount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DETAIL, new org.apache.thrift.meta_data.FieldMetaData("detail", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.COLLECT_COUNT, new org.apache.thrift.meta_data.FieldMetaData("collectCount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.UP_COUNT, new org.apache.thrift.meta_data.FieldMetaData("upCount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SHARE_COUNT, new org.apache.thrift.meta_data.FieldMetaData("shareCount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.COMMENT_COUNT, new org.apache.thrift.meta_data.FieldMetaData("commentCount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CREATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("createTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.UPDATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("updateTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.SEX_LIMIT, new org.apache.thrift.meta_data.FieldMetaData("sexLimit", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PUBLIC_PHONE, new org.apache.thrift.meta_data.FieldMetaData("publicPhone", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PUBLIC_WECHAT, new org.apache.thrift.meta_data.FieldMetaData("publicWechat", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(JourneyThrift.class, metaDataMap);
  }

  public JourneyThrift() {
  }

  public JourneyThrift(
    int id,
    int userId,
    String origin,
    String destination,
    String tripMode,
    long startDate,
    int dayCount,
    int partnerCount,
    int hasMaleCount,
    int hasFemaleCount,
    int needMaleCount,
    int needFemaleCount,
    String detail,
    int collectCount,
    int upCount,
    int shareCount,
    int commentCount,
    int status,
    long createTime,
    long updateTime,
    int sexLimit,
    int publicPhone,
    int publicWechat)
  {
    this();
    this.id = id;
    setIdIsSet(true);
    this.userId = userId;
    setUserIdIsSet(true);
    this.origin = origin;
    this.destination = destination;
    this.tripMode = tripMode;
    this.startDate = startDate;
    setStartDateIsSet(true);
    this.dayCount = dayCount;
    setDayCountIsSet(true);
    this.partnerCount = partnerCount;
    setPartnerCountIsSet(true);
    this.hasMaleCount = hasMaleCount;
    setHasMaleCountIsSet(true);
    this.hasFemaleCount = hasFemaleCount;
    setHasFemaleCountIsSet(true);
    this.needMaleCount = needMaleCount;
    setNeedMaleCountIsSet(true);
    this.needFemaleCount = needFemaleCount;
    setNeedFemaleCountIsSet(true);
    this.detail = detail;
    this.collectCount = collectCount;
    setCollectCountIsSet(true);
    this.upCount = upCount;
    setUpCountIsSet(true);
    this.shareCount = shareCount;
    setShareCountIsSet(true);
    this.commentCount = commentCount;
    setCommentCountIsSet(true);
    this.status = status;
    setStatusIsSet(true);
    this.createTime = createTime;
    setCreateTimeIsSet(true);
    this.updateTime = updateTime;
    setUpdateTimeIsSet(true);
    this.sexLimit = sexLimit;
    setSexLimitIsSet(true);
    this.publicPhone = publicPhone;
    setPublicPhoneIsSet(true);
    this.publicWechat = publicWechat;
    setPublicWechatIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public JourneyThrift(JourneyThrift other) {
    __isset_bitfield = other.__isset_bitfield;
    this.id = other.id;
    this.userId = other.userId;
    if (other.isSetOrigin()) {
      this.origin = other.origin;
    }
    if (other.isSetDestination()) {
      this.destination = other.destination;
    }
    if (other.isSetTripMode()) {
      this.tripMode = other.tripMode;
    }
    this.startDate = other.startDate;
    this.dayCount = other.dayCount;
    this.partnerCount = other.partnerCount;
    this.hasMaleCount = other.hasMaleCount;
    this.hasFemaleCount = other.hasFemaleCount;
    this.needMaleCount = other.needMaleCount;
    this.needFemaleCount = other.needFemaleCount;
    if (other.isSetDetail()) {
      this.detail = other.detail;
    }
    this.collectCount = other.collectCount;
    this.upCount = other.upCount;
    this.shareCount = other.shareCount;
    this.commentCount = other.commentCount;
    this.status = other.status;
    this.createTime = other.createTime;
    this.updateTime = other.updateTime;
    this.sexLimit = other.sexLimit;
    this.publicPhone = other.publicPhone;
    this.publicWechat = other.publicWechat;
  }

  public JourneyThrift deepCopy() {
    return new JourneyThrift(this);
  }

  @Override
  public void clear() {
    setIdIsSet(false);
    this.id = 0;
    setUserIdIsSet(false);
    this.userId = 0;
    this.origin = null;
    this.destination = null;
    this.tripMode = null;
    setStartDateIsSet(false);
    this.startDate = 0;
    setDayCountIsSet(false);
    this.dayCount = 0;
    setPartnerCountIsSet(false);
    this.partnerCount = 0;
    setHasMaleCountIsSet(false);
    this.hasMaleCount = 0;
    setHasFemaleCountIsSet(false);
    this.hasFemaleCount = 0;
    setNeedMaleCountIsSet(false);
    this.needMaleCount = 0;
    setNeedFemaleCountIsSet(false);
    this.needFemaleCount = 0;
    this.detail = null;
    setCollectCountIsSet(false);
    this.collectCount = 0;
    setUpCountIsSet(false);
    this.upCount = 0;
    setShareCountIsSet(false);
    this.shareCount = 0;
    setCommentCountIsSet(false);
    this.commentCount = 0;
    setStatusIsSet(false);
    this.status = 0;
    setCreateTimeIsSet(false);
    this.createTime = 0;
    setUpdateTimeIsSet(false);
    this.updateTime = 0;
    setSexLimitIsSet(false);
    this.sexLimit = 0;
    setPublicPhoneIsSet(false);
    this.publicPhone = 0;
    setPublicWechatIsSet(false);
    this.publicWechat = 0;
  }

  public int getId() {
    return this.id;
  }

  public JourneyThrift setId(int id) {
    this.id = id;
    setIdIsSet(true);
    return this;
  }

  public void unsetId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

  public int getUserId() {
    return this.userId;
  }

  public JourneyThrift setUserId(int userId) {
    this.userId = userId;
    setUserIdIsSet(true);
    return this;
  }

  public void unsetUserId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __USERID_ISSET_ID);
  }

  /** Returns true if field userId is set (has been assigned a value) and false otherwise */
  public boolean isSetUserId() {
    return EncodingUtils.testBit(__isset_bitfield, __USERID_ISSET_ID);
  }

  public void setUserIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __USERID_ISSET_ID, value);
  }

  public String getOrigin() {
    return this.origin;
  }

  public JourneyThrift setOrigin(String origin) {
    this.origin = origin;
    return this;
  }

  public void unsetOrigin() {
    this.origin = null;
  }

  /** Returns true if field origin is set (has been assigned a value) and false otherwise */
  public boolean isSetOrigin() {
    return this.origin != null;
  }

  public void setOriginIsSet(boolean value) {
    if (!value) {
      this.origin = null;
    }
  }

  public String getDestination() {
    return this.destination;
  }

  public JourneyThrift setDestination(String destination) {
    this.destination = destination;
    return this;
  }

  public void unsetDestination() {
    this.destination = null;
  }

  /** Returns true if field destination is set (has been assigned a value) and false otherwise */
  public boolean isSetDestination() {
    return this.destination != null;
  }

  public void setDestinationIsSet(boolean value) {
    if (!value) {
      this.destination = null;
    }
  }

  public String getTripMode() {
    return this.tripMode;
  }

  public JourneyThrift setTripMode(String tripMode) {
    this.tripMode = tripMode;
    return this;
  }

  public void unsetTripMode() {
    this.tripMode = null;
  }

  /** Returns true if field tripMode is set (has been assigned a value) and false otherwise */
  public boolean isSetTripMode() {
    return this.tripMode != null;
  }

  public void setTripModeIsSet(boolean value) {
    if (!value) {
      this.tripMode = null;
    }
  }

  public long getStartDate() {
    return this.startDate;
  }

  public JourneyThrift setStartDate(long startDate) {
    this.startDate = startDate;
    setStartDateIsSet(true);
    return this;
  }

  public void unsetStartDate() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STARTDATE_ISSET_ID);
  }

  /** Returns true if field startDate is set (has been assigned a value) and false otherwise */
  public boolean isSetStartDate() {
    return EncodingUtils.testBit(__isset_bitfield, __STARTDATE_ISSET_ID);
  }

  public void setStartDateIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STARTDATE_ISSET_ID, value);
  }

  public int getDayCount() {
    return this.dayCount;
  }

  public JourneyThrift setDayCount(int dayCount) {
    this.dayCount = dayCount;
    setDayCountIsSet(true);
    return this;
  }

  public void unsetDayCount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DAYCOUNT_ISSET_ID);
  }

  /** Returns true if field dayCount is set (has been assigned a value) and false otherwise */
  public boolean isSetDayCount() {
    return EncodingUtils.testBit(__isset_bitfield, __DAYCOUNT_ISSET_ID);
  }

  public void setDayCountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DAYCOUNT_ISSET_ID, value);
  }

  public int getPartnerCount() {
    return this.partnerCount;
  }

  public JourneyThrift setPartnerCount(int partnerCount) {
    this.partnerCount = partnerCount;
    setPartnerCountIsSet(true);
    return this;
  }

  public void unsetPartnerCount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PARTNERCOUNT_ISSET_ID);
  }

  /** Returns true if field partnerCount is set (has been assigned a value) and false otherwise */
  public boolean isSetPartnerCount() {
    return EncodingUtils.testBit(__isset_bitfield, __PARTNERCOUNT_ISSET_ID);
  }

  public void setPartnerCountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PARTNERCOUNT_ISSET_ID, value);
  }

  public int getHasMaleCount() {
    return this.hasMaleCount;
  }

  public JourneyThrift setHasMaleCount(int hasMaleCount) {
    this.hasMaleCount = hasMaleCount;
    setHasMaleCountIsSet(true);
    return this;
  }

  public void unsetHasMaleCount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __HASMALECOUNT_ISSET_ID);
  }

  /** Returns true if field hasMaleCount is set (has been assigned a value) and false otherwise */
  public boolean isSetHasMaleCount() {
    return EncodingUtils.testBit(__isset_bitfield, __HASMALECOUNT_ISSET_ID);
  }

  public void setHasMaleCountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __HASMALECOUNT_ISSET_ID, value);
  }

  public int getHasFemaleCount() {
    return this.hasFemaleCount;
  }

  public JourneyThrift setHasFemaleCount(int hasFemaleCount) {
    this.hasFemaleCount = hasFemaleCount;
    setHasFemaleCountIsSet(true);
    return this;
  }

  public void unsetHasFemaleCount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __HASFEMALECOUNT_ISSET_ID);
  }

  /** Returns true if field hasFemaleCount is set (has been assigned a value) and false otherwise */
  public boolean isSetHasFemaleCount() {
    return EncodingUtils.testBit(__isset_bitfield, __HASFEMALECOUNT_ISSET_ID);
  }

  public void setHasFemaleCountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __HASFEMALECOUNT_ISSET_ID, value);
  }

  public int getNeedMaleCount() {
    return this.needMaleCount;
  }

  public JourneyThrift setNeedMaleCount(int needMaleCount) {
    this.needMaleCount = needMaleCount;
    setNeedMaleCountIsSet(true);
    return this;
  }

  public void unsetNeedMaleCount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NEEDMALECOUNT_ISSET_ID);
  }

  /** Returns true if field needMaleCount is set (has been assigned a value) and false otherwise */
  public boolean isSetNeedMaleCount() {
    return EncodingUtils.testBit(__isset_bitfield, __NEEDMALECOUNT_ISSET_ID);
  }

  public void setNeedMaleCountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NEEDMALECOUNT_ISSET_ID, value);
  }

  public int getNeedFemaleCount() {
    return this.needFemaleCount;
  }

  public JourneyThrift setNeedFemaleCount(int needFemaleCount) {
    this.needFemaleCount = needFemaleCount;
    setNeedFemaleCountIsSet(true);
    return this;
  }

  public void unsetNeedFemaleCount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NEEDFEMALECOUNT_ISSET_ID);
  }

  /** Returns true if field needFemaleCount is set (has been assigned a value) and false otherwise */
  public boolean isSetNeedFemaleCount() {
    return EncodingUtils.testBit(__isset_bitfield, __NEEDFEMALECOUNT_ISSET_ID);
  }

  public void setNeedFemaleCountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NEEDFEMALECOUNT_ISSET_ID, value);
  }

  public String getDetail() {
    return this.detail;
  }

  public JourneyThrift setDetail(String detail) {
    this.detail = detail;
    return this;
  }

  public void unsetDetail() {
    this.detail = null;
  }

  /** Returns true if field detail is set (has been assigned a value) and false otherwise */
  public boolean isSetDetail() {
    return this.detail != null;
  }

  public void setDetailIsSet(boolean value) {
    if (!value) {
      this.detail = null;
    }
  }

  public int getCollectCount() {
    return this.collectCount;
  }

  public JourneyThrift setCollectCount(int collectCount) {
    this.collectCount = collectCount;
    setCollectCountIsSet(true);
    return this;
  }

  public void unsetCollectCount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __COLLECTCOUNT_ISSET_ID);
  }

  /** Returns true if field collectCount is set (has been assigned a value) and false otherwise */
  public boolean isSetCollectCount() {
    return EncodingUtils.testBit(__isset_bitfield, __COLLECTCOUNT_ISSET_ID);
  }

  public void setCollectCountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __COLLECTCOUNT_ISSET_ID, value);
  }

  public int getUpCount() {
    return this.upCount;
  }

  public JourneyThrift setUpCount(int upCount) {
    this.upCount = upCount;
    setUpCountIsSet(true);
    return this;
  }

  public void unsetUpCount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __UPCOUNT_ISSET_ID);
  }

  /** Returns true if field upCount is set (has been assigned a value) and false otherwise */
  public boolean isSetUpCount() {
    return EncodingUtils.testBit(__isset_bitfield, __UPCOUNT_ISSET_ID);
  }

  public void setUpCountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __UPCOUNT_ISSET_ID, value);
  }

  public int getShareCount() {
    return this.shareCount;
  }

  public JourneyThrift setShareCount(int shareCount) {
    this.shareCount = shareCount;
    setShareCountIsSet(true);
    return this;
  }

  public void unsetShareCount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SHARECOUNT_ISSET_ID);
  }

  /** Returns true if field shareCount is set (has been assigned a value) and false otherwise */
  public boolean isSetShareCount() {
    return EncodingUtils.testBit(__isset_bitfield, __SHARECOUNT_ISSET_ID);
  }

  public void setShareCountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SHARECOUNT_ISSET_ID, value);
  }

  public int getCommentCount() {
    return this.commentCount;
  }

  public JourneyThrift setCommentCount(int commentCount) {
    this.commentCount = commentCount;
    setCommentCountIsSet(true);
    return this;
  }

  public void unsetCommentCount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __COMMENTCOUNT_ISSET_ID);
  }

  /** Returns true if field commentCount is set (has been assigned a value) and false otherwise */
  public boolean isSetCommentCount() {
    return EncodingUtils.testBit(__isset_bitfield, __COMMENTCOUNT_ISSET_ID);
  }

  public void setCommentCountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __COMMENTCOUNT_ISSET_ID, value);
  }

  public int getStatus() {
    return this.status;
  }

  public JourneyThrift setStatus(int status) {
    this.status = status;
    setStatusIsSet(true);
    return this;
  }

  public void unsetStatus() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  /** Returns true if field status is set (has been assigned a value) and false otherwise */
  public boolean isSetStatus() {
    return EncodingUtils.testBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  public void setStatusIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STATUS_ISSET_ID, value);
  }

  public long getCreateTime() {
    return this.createTime;
  }

  public JourneyThrift setCreateTime(long createTime) {
    this.createTime = createTime;
    setCreateTimeIsSet(true);
    return this;
  }

  public void unsetCreateTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CREATETIME_ISSET_ID);
  }

  /** Returns true if field createTime is set (has been assigned a value) and false otherwise */
  public boolean isSetCreateTime() {
    return EncodingUtils.testBit(__isset_bitfield, __CREATETIME_ISSET_ID);
  }

  public void setCreateTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CREATETIME_ISSET_ID, value);
  }

  public long getUpdateTime() {
    return this.updateTime;
  }

  public JourneyThrift setUpdateTime(long updateTime) {
    this.updateTime = updateTime;
    setUpdateTimeIsSet(true);
    return this;
  }

  public void unsetUpdateTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __UPDATETIME_ISSET_ID);
  }

  /** Returns true if field updateTime is set (has been assigned a value) and false otherwise */
  public boolean isSetUpdateTime() {
    return EncodingUtils.testBit(__isset_bitfield, __UPDATETIME_ISSET_ID);
  }

  public void setUpdateTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __UPDATETIME_ISSET_ID, value);
  }

  public int getSexLimit() {
    return this.sexLimit;
  }

  public JourneyThrift setSexLimit(int sexLimit) {
    this.sexLimit = sexLimit;
    setSexLimitIsSet(true);
    return this;
  }

  public void unsetSexLimit() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SEXLIMIT_ISSET_ID);
  }

  /** Returns true if field sexLimit is set (has been assigned a value) and false otherwise */
  public boolean isSetSexLimit() {
    return EncodingUtils.testBit(__isset_bitfield, __SEXLIMIT_ISSET_ID);
  }

  public void setSexLimitIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SEXLIMIT_ISSET_ID, value);
  }

  public int getPublicPhone() {
    return this.publicPhone;
  }

  public JourneyThrift setPublicPhone(int publicPhone) {
    this.publicPhone = publicPhone;
    setPublicPhoneIsSet(true);
    return this;
  }

  public void unsetPublicPhone() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PUBLICPHONE_ISSET_ID);
  }

  /** Returns true if field publicPhone is set (has been assigned a value) and false otherwise */
  public boolean isSetPublicPhone() {
    return EncodingUtils.testBit(__isset_bitfield, __PUBLICPHONE_ISSET_ID);
  }

  public void setPublicPhoneIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PUBLICPHONE_ISSET_ID, value);
  }

  public int getPublicWechat() {
    return this.publicWechat;
  }

  public JourneyThrift setPublicWechat(int publicWechat) {
    this.publicWechat = publicWechat;
    setPublicWechatIsSet(true);
    return this;
  }

  public void unsetPublicWechat() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PUBLICWECHAT_ISSET_ID);
  }

  /** Returns true if field publicWechat is set (has been assigned a value) and false otherwise */
  public boolean isSetPublicWechat() {
    return EncodingUtils.testBit(__isset_bitfield, __PUBLICWECHAT_ISSET_ID);
  }

  public void setPublicWechatIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PUBLICWECHAT_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((Integer)value);
      }
      break;

    case USER_ID:
      if (value == null) {
        unsetUserId();
      } else {
        setUserId((Integer)value);
      }
      break;

    case ORIGIN:
      if (value == null) {
        unsetOrigin();
      } else {
        setOrigin((String)value);
      }
      break;

    case DESTINATION:
      if (value == null) {
        unsetDestination();
      } else {
        setDestination((String)value);
      }
      break;

    case TRIP_MODE:
      if (value == null) {
        unsetTripMode();
      } else {
        setTripMode((String)value);
      }
      break;

    case START_DATE:
      if (value == null) {
        unsetStartDate();
      } else {
        setStartDate((Long)value);
      }
      break;

    case DAY_COUNT:
      if (value == null) {
        unsetDayCount();
      } else {
        setDayCount((Integer)value);
      }
      break;

    case PARTNER_COUNT:
      if (value == null) {
        unsetPartnerCount();
      } else {
        setPartnerCount((Integer)value);
      }
      break;

    case HAS_MALE_COUNT:
      if (value == null) {
        unsetHasMaleCount();
      } else {
        setHasMaleCount((Integer)value);
      }
      break;

    case HAS_FEMALE_COUNT:
      if (value == null) {
        unsetHasFemaleCount();
      } else {
        setHasFemaleCount((Integer)value);
      }
      break;

    case NEED_MALE_COUNT:
      if (value == null) {
        unsetNeedMaleCount();
      } else {
        setNeedMaleCount((Integer)value);
      }
      break;

    case NEED_FEMALE_COUNT:
      if (value == null) {
        unsetNeedFemaleCount();
      } else {
        setNeedFemaleCount((Integer)value);
      }
      break;

    case DETAIL:
      if (value == null) {
        unsetDetail();
      } else {
        setDetail((String)value);
      }
      break;

    case COLLECT_COUNT:
      if (value == null) {
        unsetCollectCount();
      } else {
        setCollectCount((Integer)value);
      }
      break;

    case UP_COUNT:
      if (value == null) {
        unsetUpCount();
      } else {
        setUpCount((Integer)value);
      }
      break;

    case SHARE_COUNT:
      if (value == null) {
        unsetShareCount();
      } else {
        setShareCount((Integer)value);
      }
      break;

    case COMMENT_COUNT:
      if (value == null) {
        unsetCommentCount();
      } else {
        setCommentCount((Integer)value);
      }
      break;

    case STATUS:
      if (value == null) {
        unsetStatus();
      } else {
        setStatus((Integer)value);
      }
      break;

    case CREATE_TIME:
      if (value == null) {
        unsetCreateTime();
      } else {
        setCreateTime((Long)value);
      }
      break;

    case UPDATE_TIME:
      if (value == null) {
        unsetUpdateTime();
      } else {
        setUpdateTime((Long)value);
      }
      break;

    case SEX_LIMIT:
      if (value == null) {
        unsetSexLimit();
      } else {
        setSexLimit((Integer)value);
      }
      break;

    case PUBLIC_PHONE:
      if (value == null) {
        unsetPublicPhone();
      } else {
        setPublicPhone((Integer)value);
      }
      break;

    case PUBLIC_WECHAT:
      if (value == null) {
        unsetPublicWechat();
      } else {
        setPublicWechat((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return Integer.valueOf(getId());

    case USER_ID:
      return Integer.valueOf(getUserId());

    case ORIGIN:
      return getOrigin();

    case DESTINATION:
      return getDestination();

    case TRIP_MODE:
      return getTripMode();

    case START_DATE:
      return Long.valueOf(getStartDate());

    case DAY_COUNT:
      return Integer.valueOf(getDayCount());

    case PARTNER_COUNT:
      return Integer.valueOf(getPartnerCount());

    case HAS_MALE_COUNT:
      return Integer.valueOf(getHasMaleCount());

    case HAS_FEMALE_COUNT:
      return Integer.valueOf(getHasFemaleCount());

    case NEED_MALE_COUNT:
      return Integer.valueOf(getNeedMaleCount());

    case NEED_FEMALE_COUNT:
      return Integer.valueOf(getNeedFemaleCount());

    case DETAIL:
      return getDetail();

    case COLLECT_COUNT:
      return Integer.valueOf(getCollectCount());

    case UP_COUNT:
      return Integer.valueOf(getUpCount());

    case SHARE_COUNT:
      return Integer.valueOf(getShareCount());

    case COMMENT_COUNT:
      return Integer.valueOf(getCommentCount());

    case STATUS:
      return Integer.valueOf(getStatus());

    case CREATE_TIME:
      return Long.valueOf(getCreateTime());

    case UPDATE_TIME:
      return Long.valueOf(getUpdateTime());

    case SEX_LIMIT:
      return Integer.valueOf(getSexLimit());

    case PUBLIC_PHONE:
      return Integer.valueOf(getPublicPhone());

    case PUBLIC_WECHAT:
      return Integer.valueOf(getPublicWechat());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case USER_ID:
      return isSetUserId();
    case ORIGIN:
      return isSetOrigin();
    case DESTINATION:
      return isSetDestination();
    case TRIP_MODE:
      return isSetTripMode();
    case START_DATE:
      return isSetStartDate();
    case DAY_COUNT:
      return isSetDayCount();
    case PARTNER_COUNT:
      return isSetPartnerCount();
    case HAS_MALE_COUNT:
      return isSetHasMaleCount();
    case HAS_FEMALE_COUNT:
      return isSetHasFemaleCount();
    case NEED_MALE_COUNT:
      return isSetNeedMaleCount();
    case NEED_FEMALE_COUNT:
      return isSetNeedFemaleCount();
    case DETAIL:
      return isSetDetail();
    case COLLECT_COUNT:
      return isSetCollectCount();
    case UP_COUNT:
      return isSetUpCount();
    case SHARE_COUNT:
      return isSetShareCount();
    case COMMENT_COUNT:
      return isSetCommentCount();
    case STATUS:
      return isSetStatus();
    case CREATE_TIME:
      return isSetCreateTime();
    case UPDATE_TIME:
      return isSetUpdateTime();
    case SEX_LIMIT:
      return isSetSexLimit();
    case PUBLIC_PHONE:
      return isSetPublicPhone();
    case PUBLIC_WECHAT:
      return isSetPublicWechat();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof JourneyThrift)
      return this.equals((JourneyThrift)that);
    return false;
  }

  public boolean equals(JourneyThrift that) {
    if (that == null)
      return false;

    boolean this_present_id = true;
    boolean that_present_id = true;
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_userId = true;
    boolean that_present_userId = true;
    if (this_present_userId || that_present_userId) {
      if (!(this_present_userId && that_present_userId))
        return false;
      if (this.userId != that.userId)
        return false;
    }

    boolean this_present_origin = true && this.isSetOrigin();
    boolean that_present_origin = true && that.isSetOrigin();
    if (this_present_origin || that_present_origin) {
      if (!(this_present_origin && that_present_origin))
        return false;
      if (!this.origin.equals(that.origin))
        return false;
    }

    boolean this_present_destination = true && this.isSetDestination();
    boolean that_present_destination = true && that.isSetDestination();
    if (this_present_destination || that_present_destination) {
      if (!(this_present_destination && that_present_destination))
        return false;
      if (!this.destination.equals(that.destination))
        return false;
    }

    boolean this_present_tripMode = true && this.isSetTripMode();
    boolean that_present_tripMode = true && that.isSetTripMode();
    if (this_present_tripMode || that_present_tripMode) {
      if (!(this_present_tripMode && that_present_tripMode))
        return false;
      if (!this.tripMode.equals(that.tripMode))
        return false;
    }

    boolean this_present_startDate = true;
    boolean that_present_startDate = true;
    if (this_present_startDate || that_present_startDate) {
      if (!(this_present_startDate && that_present_startDate))
        return false;
      if (this.startDate != that.startDate)
        return false;
    }

    boolean this_present_dayCount = true;
    boolean that_present_dayCount = true;
    if (this_present_dayCount || that_present_dayCount) {
      if (!(this_present_dayCount && that_present_dayCount))
        return false;
      if (this.dayCount != that.dayCount)
        return false;
    }

    boolean this_present_partnerCount = true;
    boolean that_present_partnerCount = true;
    if (this_present_partnerCount || that_present_partnerCount) {
      if (!(this_present_partnerCount && that_present_partnerCount))
        return false;
      if (this.partnerCount != that.partnerCount)
        return false;
    }

    boolean this_present_hasMaleCount = true;
    boolean that_present_hasMaleCount = true;
    if (this_present_hasMaleCount || that_present_hasMaleCount) {
      if (!(this_present_hasMaleCount && that_present_hasMaleCount))
        return false;
      if (this.hasMaleCount != that.hasMaleCount)
        return false;
    }

    boolean this_present_hasFemaleCount = true;
    boolean that_present_hasFemaleCount = true;
    if (this_present_hasFemaleCount || that_present_hasFemaleCount) {
      if (!(this_present_hasFemaleCount && that_present_hasFemaleCount))
        return false;
      if (this.hasFemaleCount != that.hasFemaleCount)
        return false;
    }

    boolean this_present_needMaleCount = true;
    boolean that_present_needMaleCount = true;
    if (this_present_needMaleCount || that_present_needMaleCount) {
      if (!(this_present_needMaleCount && that_present_needMaleCount))
        return false;
      if (this.needMaleCount != that.needMaleCount)
        return false;
    }

    boolean this_present_needFemaleCount = true;
    boolean that_present_needFemaleCount = true;
    if (this_present_needFemaleCount || that_present_needFemaleCount) {
      if (!(this_present_needFemaleCount && that_present_needFemaleCount))
        return false;
      if (this.needFemaleCount != that.needFemaleCount)
        return false;
    }

    boolean this_present_detail = true && this.isSetDetail();
    boolean that_present_detail = true && that.isSetDetail();
    if (this_present_detail || that_present_detail) {
      if (!(this_present_detail && that_present_detail))
        return false;
      if (!this.detail.equals(that.detail))
        return false;
    }

    boolean this_present_collectCount = true;
    boolean that_present_collectCount = true;
    if (this_present_collectCount || that_present_collectCount) {
      if (!(this_present_collectCount && that_present_collectCount))
        return false;
      if (this.collectCount != that.collectCount)
        return false;
    }

    boolean this_present_upCount = true;
    boolean that_present_upCount = true;
    if (this_present_upCount || that_present_upCount) {
      if (!(this_present_upCount && that_present_upCount))
        return false;
      if (this.upCount != that.upCount)
        return false;
    }

    boolean this_present_shareCount = true;
    boolean that_present_shareCount = true;
    if (this_present_shareCount || that_present_shareCount) {
      if (!(this_present_shareCount && that_present_shareCount))
        return false;
      if (this.shareCount != that.shareCount)
        return false;
    }

    boolean this_present_commentCount = true;
    boolean that_present_commentCount = true;
    if (this_present_commentCount || that_present_commentCount) {
      if (!(this_present_commentCount && that_present_commentCount))
        return false;
      if (this.commentCount != that.commentCount)
        return false;
    }

    boolean this_present_status = true;
    boolean that_present_status = true;
    if (this_present_status || that_present_status) {
      if (!(this_present_status && that_present_status))
        return false;
      if (this.status != that.status)
        return false;
    }

    boolean this_present_createTime = true;
    boolean that_present_createTime = true;
    if (this_present_createTime || that_present_createTime) {
      if (!(this_present_createTime && that_present_createTime))
        return false;
      if (this.createTime != that.createTime)
        return false;
    }

    boolean this_present_updateTime = true;
    boolean that_present_updateTime = true;
    if (this_present_updateTime || that_present_updateTime) {
      if (!(this_present_updateTime && that_present_updateTime))
        return false;
      if (this.updateTime != that.updateTime)
        return false;
    }

    boolean this_present_sexLimit = true;
    boolean that_present_sexLimit = true;
    if (this_present_sexLimit || that_present_sexLimit) {
      if (!(this_present_sexLimit && that_present_sexLimit))
        return false;
      if (this.sexLimit != that.sexLimit)
        return false;
    }

    boolean this_present_publicPhone = true;
    boolean that_present_publicPhone = true;
    if (this_present_publicPhone || that_present_publicPhone) {
      if (!(this_present_publicPhone && that_present_publicPhone))
        return false;
      if (this.publicPhone != that.publicPhone)
        return false;
    }

    boolean this_present_publicWechat = true;
    boolean that_present_publicWechat = true;
    if (this_present_publicWechat || that_present_publicWechat) {
      if (!(this_present_publicWechat && that_present_publicWechat))
        return false;
      if (this.publicWechat != that.publicWechat)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(JourneyThrift other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    JourneyThrift typedOther = (JourneyThrift)other;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(typedOther.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, typedOther.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUserId()).compareTo(typedOther.isSetUserId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userId, typedOther.userId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOrigin()).compareTo(typedOther.isSetOrigin());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrigin()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.origin, typedOther.origin);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDestination()).compareTo(typedOther.isSetDestination());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDestination()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.destination, typedOther.destination);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTripMode()).compareTo(typedOther.isSetTripMode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTripMode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tripMode, typedOther.tripMode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStartDate()).compareTo(typedOther.isSetStartDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStartDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.startDate, typedOther.startDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDayCount()).compareTo(typedOther.isSetDayCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDayCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dayCount, typedOther.dayCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPartnerCount()).compareTo(typedOther.isSetPartnerCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPartnerCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.partnerCount, typedOther.partnerCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHasMaleCount()).compareTo(typedOther.isSetHasMaleCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHasMaleCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hasMaleCount, typedOther.hasMaleCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHasFemaleCount()).compareTo(typedOther.isSetHasFemaleCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHasFemaleCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hasFemaleCount, typedOther.hasFemaleCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNeedMaleCount()).compareTo(typedOther.isSetNeedMaleCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNeedMaleCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.needMaleCount, typedOther.needMaleCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNeedFemaleCount()).compareTo(typedOther.isSetNeedFemaleCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNeedFemaleCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.needFemaleCount, typedOther.needFemaleCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDetail()).compareTo(typedOther.isSetDetail());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDetail()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.detail, typedOther.detail);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCollectCount()).compareTo(typedOther.isSetCollectCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCollectCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.collectCount, typedOther.collectCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUpCount()).compareTo(typedOther.isSetUpCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUpCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.upCount, typedOther.upCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetShareCount()).compareTo(typedOther.isSetShareCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetShareCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.shareCount, typedOther.shareCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCommentCount()).compareTo(typedOther.isSetCommentCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCommentCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.commentCount, typedOther.commentCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStatus()).compareTo(typedOther.isSetStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, typedOther.status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreateTime()).compareTo(typedOther.isSetCreateTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreateTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createTime, typedOther.createTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUpdateTime()).compareTo(typedOther.isSetUpdateTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUpdateTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.updateTime, typedOther.updateTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSexLimit()).compareTo(typedOther.isSetSexLimit());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSexLimit()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sexLimit, typedOther.sexLimit);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPublicPhone()).compareTo(typedOther.isSetPublicPhone());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPublicPhone()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.publicPhone, typedOther.publicPhone);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPublicWechat()).compareTo(typedOther.isSetPublicWechat());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPublicWechat()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.publicWechat, typedOther.publicWechat);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("JourneyThrift(");
    boolean first = true;

    sb.append("id:");
    sb.append(this.id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("userId:");
    sb.append(this.userId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("origin:");
    if (this.origin == null) {
      sb.append("null");
    } else {
      sb.append(this.origin);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("destination:");
    if (this.destination == null) {
      sb.append("null");
    } else {
      sb.append(this.destination);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("tripMode:");
    if (this.tripMode == null) {
      sb.append("null");
    } else {
      sb.append(this.tripMode);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("startDate:");
    sb.append(this.startDate);
    first = false;
    if (!first) sb.append(", ");
    sb.append("dayCount:");
    sb.append(this.dayCount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("partnerCount:");
    sb.append(this.partnerCount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("hasMaleCount:");
    sb.append(this.hasMaleCount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("hasFemaleCount:");
    sb.append(this.hasFemaleCount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("needMaleCount:");
    sb.append(this.needMaleCount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("needFemaleCount:");
    sb.append(this.needFemaleCount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("detail:");
    if (this.detail == null) {
      sb.append("null");
    } else {
      sb.append(this.detail);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("collectCount:");
    sb.append(this.collectCount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("upCount:");
    sb.append(this.upCount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("shareCount:");
    sb.append(this.shareCount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("commentCount:");
    sb.append(this.commentCount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("status:");
    sb.append(this.status);
    first = false;
    if (!first) sb.append(", ");
    sb.append("createTime:");
    sb.append(this.createTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("updateTime:");
    sb.append(this.updateTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("sexLimit:");
    sb.append(this.sexLimit);
    first = false;
    if (!first) sb.append(", ");
    sb.append("publicPhone:");
    sb.append(this.publicPhone);
    first = false;
    if (!first) sb.append(", ");
    sb.append("publicWechat:");
    sb.append(this.publicWechat);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class JourneyThriftStandardSchemeFactory implements SchemeFactory {
    public JourneyThriftStandardScheme getScheme() {
      return new JourneyThriftStandardScheme();
    }
  }

  private static class JourneyThriftStandardScheme extends StandardScheme<JourneyThrift> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, JourneyThrift struct) throws TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.id = iprot.readI32();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // USER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.userId = iprot.readI32();
              struct.setUserIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // ORIGIN
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.origin = iprot.readString();
              struct.setOriginIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // DESTINATION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.destination = iprot.readString();
              struct.setDestinationIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // TRIP_MODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.tripMode = iprot.readString();
              struct.setTripModeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // START_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.startDate = iprot.readI64();
              struct.setStartDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // DAY_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.dayCount = iprot.readI32();
              struct.setDayCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // PARTNER_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.partnerCount = iprot.readI32();
              struct.setPartnerCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // HAS_MALE_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.hasMaleCount = iprot.readI32();
              struct.setHasMaleCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // HAS_FEMALE_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.hasFemaleCount = iprot.readI32();
              struct.setHasFemaleCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // NEED_MALE_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.needMaleCount = iprot.readI32();
              struct.setNeedMaleCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // NEED_FEMALE_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.needFemaleCount = iprot.readI32();
              struct.setNeedFemaleCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // DETAIL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.detail = iprot.readString();
              struct.setDetailIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // COLLECT_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.collectCount = iprot.readI32();
              struct.setCollectCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // UP_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.upCount = iprot.readI32();
              struct.setUpCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // SHARE_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.shareCount = iprot.readI32();
              struct.setShareCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // COMMENT_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.commentCount = iprot.readI32();
              struct.setCommentCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.status = iprot.readI32();
              struct.setStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // CREATE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.createTime = iprot.readI64();
              struct.setCreateTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // UPDATE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.updateTime = iprot.readI64();
              struct.setUpdateTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // SEX_LIMIT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.sexLimit = iprot.readI32();
              struct.setSexLimitIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 22: // PUBLIC_PHONE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.publicPhone = iprot.readI32();
              struct.setPublicPhoneIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 23: // PUBLIC_WECHAT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.publicWechat = iprot.readI32();
              struct.setPublicWechatIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, JourneyThrift struct) throws TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(ID_FIELD_DESC);
      oprot.writeI32(struct.id);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(USER_ID_FIELD_DESC);
      oprot.writeI32(struct.userId);
      oprot.writeFieldEnd();
      if (struct.origin != null) {
        oprot.writeFieldBegin(ORIGIN_FIELD_DESC);
        oprot.writeString(struct.origin);
        oprot.writeFieldEnd();
      }
      if (struct.destination != null) {
        oprot.writeFieldBegin(DESTINATION_FIELD_DESC);
        oprot.writeString(struct.destination);
        oprot.writeFieldEnd();
      }
      if (struct.tripMode != null) {
        oprot.writeFieldBegin(TRIP_MODE_FIELD_DESC);
        oprot.writeString(struct.tripMode);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(START_DATE_FIELD_DESC);
      oprot.writeI64(struct.startDate);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(DAY_COUNT_FIELD_DESC);
      oprot.writeI32(struct.dayCount);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PARTNER_COUNT_FIELD_DESC);
      oprot.writeI32(struct.partnerCount);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(HAS_MALE_COUNT_FIELD_DESC);
      oprot.writeI32(struct.hasMaleCount);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(HAS_FEMALE_COUNT_FIELD_DESC);
      oprot.writeI32(struct.hasFemaleCount);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(NEED_MALE_COUNT_FIELD_DESC);
      oprot.writeI32(struct.needMaleCount);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(NEED_FEMALE_COUNT_FIELD_DESC);
      oprot.writeI32(struct.needFemaleCount);
      oprot.writeFieldEnd();
      if (struct.detail != null) {
        oprot.writeFieldBegin(DETAIL_FIELD_DESC);
        oprot.writeString(struct.detail);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(COLLECT_COUNT_FIELD_DESC);
      oprot.writeI32(struct.collectCount);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(UP_COUNT_FIELD_DESC);
      oprot.writeI32(struct.upCount);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SHARE_COUNT_FIELD_DESC);
      oprot.writeI32(struct.shareCount);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(COMMENT_COUNT_FIELD_DESC);
      oprot.writeI32(struct.commentCount);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(STATUS_FIELD_DESC);
      oprot.writeI32(struct.status);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CREATE_TIME_FIELD_DESC);
      oprot.writeI64(struct.createTime);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(UPDATE_TIME_FIELD_DESC);
      oprot.writeI64(struct.updateTime);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SEX_LIMIT_FIELD_DESC);
      oprot.writeI32(struct.sexLimit);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PUBLIC_PHONE_FIELD_DESC);
      oprot.writeI32(struct.publicPhone);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PUBLIC_WECHAT_FIELD_DESC);
      oprot.writeI32(struct.publicWechat);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class JourneyThriftTupleSchemeFactory implements SchemeFactory {
    public JourneyThriftTupleScheme getScheme() {
      return new JourneyThriftTupleScheme();
    }
  }

  private static class JourneyThriftTupleScheme extends TupleScheme<JourneyThrift> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, JourneyThrift struct) throws TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetUserId()) {
        optionals.set(1);
      }
      if (struct.isSetOrigin()) {
        optionals.set(2);
      }
      if (struct.isSetDestination()) {
        optionals.set(3);
      }
      if (struct.isSetTripMode()) {
        optionals.set(4);
      }
      if (struct.isSetStartDate()) {
        optionals.set(5);
      }
      if (struct.isSetDayCount()) {
        optionals.set(6);
      }
      if (struct.isSetPartnerCount()) {
        optionals.set(7);
      }
      if (struct.isSetHasMaleCount()) {
        optionals.set(8);
      }
      if (struct.isSetHasFemaleCount()) {
        optionals.set(9);
      }
      if (struct.isSetNeedMaleCount()) {
        optionals.set(10);
      }
      if (struct.isSetNeedFemaleCount()) {
        optionals.set(11);
      }
      if (struct.isSetDetail()) {
        optionals.set(12);
      }
      if (struct.isSetCollectCount()) {
        optionals.set(13);
      }
      if (struct.isSetUpCount()) {
        optionals.set(14);
      }
      if (struct.isSetShareCount()) {
        optionals.set(15);
      }
      if (struct.isSetCommentCount()) {
        optionals.set(16);
      }
      if (struct.isSetStatus()) {
        optionals.set(17);
      }
      if (struct.isSetCreateTime()) {
        optionals.set(18);
      }
      if (struct.isSetUpdateTime()) {
        optionals.set(19);
      }
      if (struct.isSetSexLimit()) {
        optionals.set(20);
      }
      if (struct.isSetPublicPhone()) {
        optionals.set(21);
      }
      if (struct.isSetPublicWechat()) {
        optionals.set(22);
      }
      oprot.writeBitSet(optionals, 23);
      if (struct.isSetId()) {
        oprot.writeI32(struct.id);
      }
      if (struct.isSetUserId()) {
        oprot.writeI32(struct.userId);
      }
      if (struct.isSetOrigin()) {
        oprot.writeString(struct.origin);
      }
      if (struct.isSetDestination()) {
        oprot.writeString(struct.destination);
      }
      if (struct.isSetTripMode()) {
        oprot.writeString(struct.tripMode);
      }
      if (struct.isSetStartDate()) {
        oprot.writeI64(struct.startDate);
      }
      if (struct.isSetDayCount()) {
        oprot.writeI32(struct.dayCount);
      }
      if (struct.isSetPartnerCount()) {
        oprot.writeI32(struct.partnerCount);
      }
      if (struct.isSetHasMaleCount()) {
        oprot.writeI32(struct.hasMaleCount);
      }
      if (struct.isSetHasFemaleCount()) {
        oprot.writeI32(struct.hasFemaleCount);
      }
      if (struct.isSetNeedMaleCount()) {
        oprot.writeI32(struct.needMaleCount);
      }
      if (struct.isSetNeedFemaleCount()) {
        oprot.writeI32(struct.needFemaleCount);
      }
      if (struct.isSetDetail()) {
        oprot.writeString(struct.detail);
      }
      if (struct.isSetCollectCount()) {
        oprot.writeI32(struct.collectCount);
      }
      if (struct.isSetUpCount()) {
        oprot.writeI32(struct.upCount);
      }
      if (struct.isSetShareCount()) {
        oprot.writeI32(struct.shareCount);
      }
      if (struct.isSetCommentCount()) {
        oprot.writeI32(struct.commentCount);
      }
      if (struct.isSetStatus()) {
        oprot.writeI32(struct.status);
      }
      if (struct.isSetCreateTime()) {
        oprot.writeI64(struct.createTime);
      }
      if (struct.isSetUpdateTime()) {
        oprot.writeI64(struct.updateTime);
      }
      if (struct.isSetSexLimit()) {
        oprot.writeI32(struct.sexLimit);
      }
      if (struct.isSetPublicPhone()) {
        oprot.writeI32(struct.publicPhone);
      }
      if (struct.isSetPublicWechat()) {
        oprot.writeI32(struct.publicWechat);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, JourneyThrift struct) throws TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(23);
      if (incoming.get(0)) {
        struct.id = iprot.readI32();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.userId = iprot.readI32();
        struct.setUserIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.origin = iprot.readString();
        struct.setOriginIsSet(true);
      }
      if (incoming.get(3)) {
        struct.destination = iprot.readString();
        struct.setDestinationIsSet(true);
      }
      if (incoming.get(4)) {
        struct.tripMode = iprot.readString();
        struct.setTripModeIsSet(true);
      }
      if (incoming.get(5)) {
        struct.startDate = iprot.readI64();
        struct.setStartDateIsSet(true);
      }
      if (incoming.get(6)) {
        struct.dayCount = iprot.readI32();
        struct.setDayCountIsSet(true);
      }
      if (incoming.get(7)) {
        struct.partnerCount = iprot.readI32();
        struct.setPartnerCountIsSet(true);
      }
      if (incoming.get(8)) {
        struct.hasMaleCount = iprot.readI32();
        struct.setHasMaleCountIsSet(true);
      }
      if (incoming.get(9)) {
        struct.hasFemaleCount = iprot.readI32();
        struct.setHasFemaleCountIsSet(true);
      }
      if (incoming.get(10)) {
        struct.needMaleCount = iprot.readI32();
        struct.setNeedMaleCountIsSet(true);
      }
      if (incoming.get(11)) {
        struct.needFemaleCount = iprot.readI32();
        struct.setNeedFemaleCountIsSet(true);
      }
      if (incoming.get(12)) {
        struct.detail = iprot.readString();
        struct.setDetailIsSet(true);
      }
      if (incoming.get(13)) {
        struct.collectCount = iprot.readI32();
        struct.setCollectCountIsSet(true);
      }
      if (incoming.get(14)) {
        struct.upCount = iprot.readI32();
        struct.setUpCountIsSet(true);
      }
      if (incoming.get(15)) {
        struct.shareCount = iprot.readI32();
        struct.setShareCountIsSet(true);
      }
      if (incoming.get(16)) {
        struct.commentCount = iprot.readI32();
        struct.setCommentCountIsSet(true);
      }
      if (incoming.get(17)) {
        struct.status = iprot.readI32();
        struct.setStatusIsSet(true);
      }
      if (incoming.get(18)) {
        struct.createTime = iprot.readI64();
        struct.setCreateTimeIsSet(true);
      }
      if (incoming.get(19)) {
        struct.updateTime = iprot.readI64();
        struct.setUpdateTimeIsSet(true);
      }
      if (incoming.get(20)) {
        struct.sexLimit = iprot.readI32();
        struct.setSexLimitIsSet(true);
      }
      if (incoming.get(21)) {
        struct.publicPhone = iprot.readI32();
        struct.setPublicPhoneIsSet(true);
      }
      if (incoming.get(22)) {
        struct.publicWechat = iprot.readI32();
        struct.setPublicWechatIsSet(true);
      }
    }
  }

}

