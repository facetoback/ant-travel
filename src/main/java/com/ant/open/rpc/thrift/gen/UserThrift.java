package com.ant.open.rpc.thrift.gen; /**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class UserThrift implements org.apache.thrift.TBase<UserThrift, UserThrift._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("UserThrift");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField USERNAME_FIELD_DESC = new org.apache.thrift.protocol.TField("username", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField NICKNAME_FIELD_DESC = new org.apache.thrift.protocol.TField("nickname", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField PHONENUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("phonenumber", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField EMAIL_FIELD_DESC = new org.apache.thrift.protocol.TField("email", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField PASSWORD_FIELD_DESC = new org.apache.thrift.protocol.TField("password", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField REALNAME_FIELD_DESC = new org.apache.thrift.protocol.TField("realname", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField SEX_FIELD_DESC = new org.apache.thrift.protocol.TField("sex", org.apache.thrift.protocol.TType.I32, (short)8);
  private static final org.apache.thrift.protocol.TField BIRTHDAY_FIELD_DESC = new org.apache.thrift.protocol.TField("birthday", org.apache.thrift.protocol.TType.I64, (short)9);
  private static final org.apache.thrift.protocol.TField LEVEL_FIELD_DESC = new org.apache.thrift.protocol.TField("level", org.apache.thrift.protocol.TType.I32, (short)10);
  private static final org.apache.thrift.protocol.TField NAME_AUTH_FIELD_DESC = new org.apache.thrift.protocol.TField("nameAuth", org.apache.thrift.protocol.TType.I32, (short)11);
  private static final org.apache.thrift.protocol.TField EMAIL_AUTH_FIELD_DESC = new org.apache.thrift.protocol.TField("emailAuth", org.apache.thrift.protocol.TType.I32, (short)12);
  private static final org.apache.thrift.protocol.TField PHONE_AUTH_FIELD_DESC = new org.apache.thrift.protocol.TField("phoneAuth", org.apache.thrift.protocol.TType.I32, (short)13);
  private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.I32, (short)14);
  private static final org.apache.thrift.protocol.TField CREATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("createTime", org.apache.thrift.protocol.TType.I64, (short)15);
  private static final org.apache.thrift.protocol.TField UPDATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("updateTime", org.apache.thrift.protocol.TType.I64, (short)16);
  private static final org.apache.thrift.protocol.TField AVATAR_URL_FIELD_DESC = new org.apache.thrift.protocol.TField("avatarUrl", org.apache.thrift.protocol.TType.STRING, (short)17);
  private static final org.apache.thrift.protocol.TField SIGNATURE_FIELD_DESC = new org.apache.thrift.protocol.TField("signature", org.apache.thrift.protocol.TType.STRING, (short)18);
  private static final org.apache.thrift.protocol.TField PROVINCE_FIELD_DESC = new org.apache.thrift.protocol.TField("province", org.apache.thrift.protocol.TType.STRING, (short)19);
  private static final org.apache.thrift.protocol.TField CITY_FIELD_DESC = new org.apache.thrift.protocol.TField("city", org.apache.thrift.protocol.TType.STRING, (short)20);
  private static final org.apache.thrift.protocol.TField FOLLOWER_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("followerCount", org.apache.thrift.protocol.TType.I32, (short)21);
  private static final org.apache.thrift.protocol.TField FOLLOWNING_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("followningCount", org.apache.thrift.protocol.TType.I32, (short)22);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new UserThriftStandardSchemeFactory());
    schemes.put(TupleScheme.class, new UserThriftTupleSchemeFactory());
  }

  public int id; // required
  public String username; // required
  public String nickname; // required
  public String phonenumber; // required
  public String email; // required
  public String password; // required
  public String realname; // required
  public int sex; // required
  public long birthday; // required
  public int level; // required
  public int nameAuth; // required
  public int emailAuth; // required
  public int phoneAuth; // required
  public int status; // required
  public long createTime; // required
  public long updateTime; // required
  public String avatarUrl; // required
  public String signature; // required
  public String province; // required
  public String city; // required
  public int followerCount; // required
  public int followningCount; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    USERNAME((short)2, "username"),
    NICKNAME((short)3, "nickname"),
    PHONENUMBER((short)4, "phonenumber"),
    EMAIL((short)5, "email"),
    PASSWORD((short)6, "password"),
    REALNAME((short)7, "realname"),
    SEX((short)8, "sex"),
    BIRTHDAY((short)9, "birthday"),
    LEVEL((short)10, "level"),
    NAME_AUTH((short)11, "nameAuth"),
    EMAIL_AUTH((short)12, "emailAuth"),
    PHONE_AUTH((short)13, "phoneAuth"),
    STATUS((short)14, "status"),
    CREATE_TIME((short)15, "createTime"),
    UPDATE_TIME((short)16, "updateTime"),
    AVATAR_URL((short)17, "avatarUrl"),
    SIGNATURE((short)18, "signature"),
    PROVINCE((short)19, "province"),
    CITY((short)20, "city"),
    FOLLOWER_COUNT((short)21, "followerCount"),
    FOLLOWNING_COUNT((short)22, "followningCount");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // USERNAME
          return USERNAME;
        case 3: // NICKNAME
          return NICKNAME;
        case 4: // PHONENUMBER
          return PHONENUMBER;
        case 5: // EMAIL
          return EMAIL;
        case 6: // PASSWORD
          return PASSWORD;
        case 7: // REALNAME
          return REALNAME;
        case 8: // SEX
          return SEX;
        case 9: // BIRTHDAY
          return BIRTHDAY;
        case 10: // LEVEL
          return LEVEL;
        case 11: // NAME_AUTH
          return NAME_AUTH;
        case 12: // EMAIL_AUTH
          return EMAIL_AUTH;
        case 13: // PHONE_AUTH
          return PHONE_AUTH;
        case 14: // STATUS
          return STATUS;
        case 15: // CREATE_TIME
          return CREATE_TIME;
        case 16: // UPDATE_TIME
          return UPDATE_TIME;
        case 17: // AVATAR_URL
          return AVATAR_URL;
        case 18: // SIGNATURE
          return SIGNATURE;
        case 19: // PROVINCE
          return PROVINCE;
        case 20: // CITY
          return CITY;
        case 21: // FOLLOWER_COUNT
          return FOLLOWER_COUNT;
        case 22: // FOLLOWNING_COUNT
          return FOLLOWNING_COUNT;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private static final int __SEX_ISSET_ID = 1;
  private static final int __BIRTHDAY_ISSET_ID = 2;
  private static final int __LEVEL_ISSET_ID = 3;
  private static final int __NAMEAUTH_ISSET_ID = 4;
  private static final int __EMAILAUTH_ISSET_ID = 5;
  private static final int __PHONEAUTH_ISSET_ID = 6;
  private static final int __STATUS_ISSET_ID = 7;
  private static final int __CREATETIME_ISSET_ID = 8;
  private static final int __UPDATETIME_ISSET_ID = 9;
  private static final int __FOLLOWERCOUNT_ISSET_ID = 10;
  private static final int __FOLLOWNINGCOUNT_ISSET_ID = 11;
  private short __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.USERNAME, new org.apache.thrift.meta_data.FieldMetaData("username", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NICKNAME, new org.apache.thrift.meta_data.FieldMetaData("nickname", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PHONENUMBER, new org.apache.thrift.meta_data.FieldMetaData("phonenumber", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.EMAIL, new org.apache.thrift.meta_data.FieldMetaData("email", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PASSWORD, new org.apache.thrift.meta_data.FieldMetaData("password", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REALNAME, new org.apache.thrift.meta_data.FieldMetaData("realname", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SEX, new org.apache.thrift.meta_data.FieldMetaData("sex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.BIRTHDAY, new org.apache.thrift.meta_data.FieldMetaData("birthday", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.LEVEL, new org.apache.thrift.meta_data.FieldMetaData("level", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.NAME_AUTH, new org.apache.thrift.meta_data.FieldMetaData("nameAuth", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.EMAIL_AUTH, new org.apache.thrift.meta_data.FieldMetaData("emailAuth", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PHONE_AUTH, new org.apache.thrift.meta_data.FieldMetaData("phoneAuth", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CREATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("createTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.UPDATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("updateTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.AVATAR_URL, new org.apache.thrift.meta_data.FieldMetaData("avatarUrl", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SIGNATURE, new org.apache.thrift.meta_data.FieldMetaData("signature", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PROVINCE, new org.apache.thrift.meta_data.FieldMetaData("province", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CITY, new org.apache.thrift.meta_data.FieldMetaData("city", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FOLLOWER_COUNT, new org.apache.thrift.meta_data.FieldMetaData("followerCount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.FOLLOWNING_COUNT, new org.apache.thrift.meta_data.FieldMetaData("followningCount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(UserThrift.class, metaDataMap);
  }

  public UserThrift() {
  }

  public UserThrift(
    int id,
    String username,
    String nickname,
    String phonenumber,
    String email,
    String password,
    String realname,
    int sex,
    long birthday,
    int level,
    int nameAuth,
    int emailAuth,
    int phoneAuth,
    int status,
    long createTime,
    long updateTime,
    String avatarUrl,
    String signature,
    String province,
    String city,
    int followerCount,
    int followningCount)
  {
    this();
    this.id = id;
    setIdIsSet(true);
    this.username = username;
    this.nickname = nickname;
    this.phonenumber = phonenumber;
    this.email = email;
    this.password = password;
    this.realname = realname;
    this.sex = sex;
    setSexIsSet(true);
    this.birthday = birthday;
    setBirthdayIsSet(true);
    this.level = level;
    setLevelIsSet(true);
    this.nameAuth = nameAuth;
    setNameAuthIsSet(true);
    this.emailAuth = emailAuth;
    setEmailAuthIsSet(true);
    this.phoneAuth = phoneAuth;
    setPhoneAuthIsSet(true);
    this.status = status;
    setStatusIsSet(true);
    this.createTime = createTime;
    setCreateTimeIsSet(true);
    this.updateTime = updateTime;
    setUpdateTimeIsSet(true);
    this.avatarUrl = avatarUrl;
    this.signature = signature;
    this.province = province;
    this.city = city;
    this.followerCount = followerCount;
    setFollowerCountIsSet(true);
    this.followningCount = followningCount;
    setFollowningCountIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public UserThrift(UserThrift other) {
    __isset_bitfield = other.__isset_bitfield;
    this.id = other.id;
    if (other.isSetUsername()) {
      this.username = other.username;
    }
    if (other.isSetNickname()) {
      this.nickname = other.nickname;
    }
    if (other.isSetPhonenumber()) {
      this.phonenumber = other.phonenumber;
    }
    if (other.isSetEmail()) {
      this.email = other.email;
    }
    if (other.isSetPassword()) {
      this.password = other.password;
    }
    if (other.isSetRealname()) {
      this.realname = other.realname;
    }
    this.sex = other.sex;
    this.birthday = other.birthday;
    this.level = other.level;
    this.nameAuth = other.nameAuth;
    this.emailAuth = other.emailAuth;
    this.phoneAuth = other.phoneAuth;
    this.status = other.status;
    this.createTime = other.createTime;
    this.updateTime = other.updateTime;
    if (other.isSetAvatarUrl()) {
      this.avatarUrl = other.avatarUrl;
    }
    if (other.isSetSignature()) {
      this.signature = other.signature;
    }
    if (other.isSetProvince()) {
      this.province = other.province;
    }
    if (other.isSetCity()) {
      this.city = other.city;
    }
    this.followerCount = other.followerCount;
    this.followningCount = other.followningCount;
  }

  public UserThrift deepCopy() {
    return new UserThrift(this);
  }

  @Override
  public void clear() {
    setIdIsSet(false);
    this.id = 0;
    this.username = null;
    this.nickname = null;
    this.phonenumber = null;
    this.email = null;
    this.password = null;
    this.realname = null;
    setSexIsSet(false);
    this.sex = 0;
    setBirthdayIsSet(false);
    this.birthday = 0;
    setLevelIsSet(false);
    this.level = 0;
    setNameAuthIsSet(false);
    this.nameAuth = 0;
    setEmailAuthIsSet(false);
    this.emailAuth = 0;
    setPhoneAuthIsSet(false);
    this.phoneAuth = 0;
    setStatusIsSet(false);
    this.status = 0;
    setCreateTimeIsSet(false);
    this.createTime = 0;
    setUpdateTimeIsSet(false);
    this.updateTime = 0;
    this.avatarUrl = null;
    this.signature = null;
    this.province = null;
    this.city = null;
    setFollowerCountIsSet(false);
    this.followerCount = 0;
    setFollowningCountIsSet(false);
    this.followningCount = 0;
  }

  public int getId() {
    return this.id;
  }

  public UserThrift setId(int id) {
    this.id = id;
    setIdIsSet(true);
    return this;
  }

  public void unsetId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

  public String getUsername() {
    return this.username;
  }

  public UserThrift setUsername(String username) {
    this.username = username;
    return this;
  }

  public void unsetUsername() {
    this.username = null;
  }

  /** Returns true if field username is set (has been assigned a value) and false otherwise */
  public boolean isSetUsername() {
    return this.username != null;
  }

  public void setUsernameIsSet(boolean value) {
    if (!value) {
      this.username = null;
    }
  }

  public String getNickname() {
    return this.nickname;
  }

  public UserThrift setNickname(String nickname) {
    this.nickname = nickname;
    return this;
  }

  public void unsetNickname() {
    this.nickname = null;
  }

  /** Returns true if field nickname is set (has been assigned a value) and false otherwise */
  public boolean isSetNickname() {
    return this.nickname != null;
  }

  public void setNicknameIsSet(boolean value) {
    if (!value) {
      this.nickname = null;
    }
  }

  public String getPhonenumber() {
    return this.phonenumber;
  }

  public UserThrift setPhonenumber(String phonenumber) {
    this.phonenumber = phonenumber;
    return this;
  }

  public void unsetPhonenumber() {
    this.phonenumber = null;
  }

  /** Returns true if field phonenumber is set (has been assigned a value) and false otherwise */
  public boolean isSetPhonenumber() {
    return this.phonenumber != null;
  }

  public void setPhonenumberIsSet(boolean value) {
    if (!value) {
      this.phonenumber = null;
    }
  }

  public String getEmail() {
    return this.email;
  }

  public UserThrift setEmail(String email) {
    this.email = email;
    return this;
  }

  public void unsetEmail() {
    this.email = null;
  }

  /** Returns true if field email is set (has been assigned a value) and false otherwise */
  public boolean isSetEmail() {
    return this.email != null;
  }

  public void setEmailIsSet(boolean value) {
    if (!value) {
      this.email = null;
    }
  }

  public String getPassword() {
    return this.password;
  }

  public UserThrift setPassword(String password) {
    this.password = password;
    return this;
  }

  public void unsetPassword() {
    this.password = null;
  }

  /** Returns true if field password is set (has been assigned a value) and false otherwise */
  public boolean isSetPassword() {
    return this.password != null;
  }

  public void setPasswordIsSet(boolean value) {
    if (!value) {
      this.password = null;
    }
  }

  public String getRealname() {
    return this.realname;
  }

  public UserThrift setRealname(String realname) {
    this.realname = realname;
    return this;
  }

  public void unsetRealname() {
    this.realname = null;
  }

  /** Returns true if field realname is set (has been assigned a value) and false otherwise */
  public boolean isSetRealname() {
    return this.realname != null;
  }

  public void setRealnameIsSet(boolean value) {
    if (!value) {
      this.realname = null;
    }
  }

  public int getSex() {
    return this.sex;
  }

  public UserThrift setSex(int sex) {
    this.sex = sex;
    setSexIsSet(true);
    return this;
  }

  public void unsetSex() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SEX_ISSET_ID);
  }

  /** Returns true if field sex is set (has been assigned a value) and false otherwise */
  public boolean isSetSex() {
    return EncodingUtils.testBit(__isset_bitfield, __SEX_ISSET_ID);
  }

  public void setSexIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SEX_ISSET_ID, value);
  }

  public long getBirthday() {
    return this.birthday;
  }

  public UserThrift setBirthday(long birthday) {
    this.birthday = birthday;
    setBirthdayIsSet(true);
    return this;
  }

  public void unsetBirthday() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BIRTHDAY_ISSET_ID);
  }

  /** Returns true if field birthday is set (has been assigned a value) and false otherwise */
  public boolean isSetBirthday() {
    return EncodingUtils.testBit(__isset_bitfield, __BIRTHDAY_ISSET_ID);
  }

  public void setBirthdayIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BIRTHDAY_ISSET_ID, value);
  }

  public int getLevel() {
    return this.level;
  }

  public UserThrift setLevel(int level) {
    this.level = level;
    setLevelIsSet(true);
    return this;
  }

  public void unsetLevel() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LEVEL_ISSET_ID);
  }

  /** Returns true if field level is set (has been assigned a value) and false otherwise */
  public boolean isSetLevel() {
    return EncodingUtils.testBit(__isset_bitfield, __LEVEL_ISSET_ID);
  }

  public void setLevelIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LEVEL_ISSET_ID, value);
  }

  public int getNameAuth() {
    return this.nameAuth;
  }

  public UserThrift setNameAuth(int nameAuth) {
    this.nameAuth = nameAuth;
    setNameAuthIsSet(true);
    return this;
  }

  public void unsetNameAuth() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NAMEAUTH_ISSET_ID);
  }

  /** Returns true if field nameAuth is set (has been assigned a value) and false otherwise */
  public boolean isSetNameAuth() {
    return EncodingUtils.testBit(__isset_bitfield, __NAMEAUTH_ISSET_ID);
  }

  public void setNameAuthIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NAMEAUTH_ISSET_ID, value);
  }

  public int getEmailAuth() {
    return this.emailAuth;
  }

  public UserThrift setEmailAuth(int emailAuth) {
    this.emailAuth = emailAuth;
    setEmailAuthIsSet(true);
    return this;
  }

  public void unsetEmailAuth() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __EMAILAUTH_ISSET_ID);
  }

  /** Returns true if field emailAuth is set (has been assigned a value) and false otherwise */
  public boolean isSetEmailAuth() {
    return EncodingUtils.testBit(__isset_bitfield, __EMAILAUTH_ISSET_ID);
  }

  public void setEmailAuthIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __EMAILAUTH_ISSET_ID, value);
  }

  public int getPhoneAuth() {
    return this.phoneAuth;
  }

  public UserThrift setPhoneAuth(int phoneAuth) {
    this.phoneAuth = phoneAuth;
    setPhoneAuthIsSet(true);
    return this;
  }

  public void unsetPhoneAuth() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PHONEAUTH_ISSET_ID);
  }

  /** Returns true if field phoneAuth is set (has been assigned a value) and false otherwise */
  public boolean isSetPhoneAuth() {
    return EncodingUtils.testBit(__isset_bitfield, __PHONEAUTH_ISSET_ID);
  }

  public void setPhoneAuthIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PHONEAUTH_ISSET_ID, value);
  }

  public int getStatus() {
    return this.status;
  }

  public UserThrift setStatus(int status) {
    this.status = status;
    setStatusIsSet(true);
    return this;
  }

  public void unsetStatus() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  /** Returns true if field status is set (has been assigned a value) and false otherwise */
  public boolean isSetStatus() {
    return EncodingUtils.testBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  public void setStatusIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STATUS_ISSET_ID, value);
  }

  public long getCreateTime() {
    return this.createTime;
  }

  public UserThrift setCreateTime(long createTime) {
    this.createTime = createTime;
    setCreateTimeIsSet(true);
    return this;
  }

  public void unsetCreateTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CREATETIME_ISSET_ID);
  }

  /** Returns true if field createTime is set (has been assigned a value) and false otherwise */
  public boolean isSetCreateTime() {
    return EncodingUtils.testBit(__isset_bitfield, __CREATETIME_ISSET_ID);
  }

  public void setCreateTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CREATETIME_ISSET_ID, value);
  }

  public long getUpdateTime() {
    return this.updateTime;
  }

  public UserThrift setUpdateTime(long updateTime) {
    this.updateTime = updateTime;
    setUpdateTimeIsSet(true);
    return this;
  }

  public void unsetUpdateTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __UPDATETIME_ISSET_ID);
  }

  /** Returns true if field updateTime is set (has been assigned a value) and false otherwise */
  public boolean isSetUpdateTime() {
    return EncodingUtils.testBit(__isset_bitfield, __UPDATETIME_ISSET_ID);
  }

  public void setUpdateTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __UPDATETIME_ISSET_ID, value);
  }

  public String getAvatarUrl() {
    return this.avatarUrl;
  }

  public UserThrift setAvatarUrl(String avatarUrl) {
    this.avatarUrl = avatarUrl;
    return this;
  }

  public void unsetAvatarUrl() {
    this.avatarUrl = null;
  }

  /** Returns true if field avatarUrl is set (has been assigned a value) and false otherwise */
  public boolean isSetAvatarUrl() {
    return this.avatarUrl != null;
  }

  public void setAvatarUrlIsSet(boolean value) {
    if (!value) {
      this.avatarUrl = null;
    }
  }

  public String getSignature() {
    return this.signature;
  }

  public UserThrift setSignature(String signature) {
    this.signature = signature;
    return this;
  }

  public void unsetSignature() {
    this.signature = null;
  }

  /** Returns true if field signature is set (has been assigned a value) and false otherwise */
  public boolean isSetSignature() {
    return this.signature != null;
  }

  public void setSignatureIsSet(boolean value) {
    if (!value) {
      this.signature = null;
    }
  }

  public String getProvince() {
    return this.province;
  }

  public UserThrift setProvince(String province) {
    this.province = province;
    return this;
  }

  public void unsetProvince() {
    this.province = null;
  }

  /** Returns true if field province is set (has been assigned a value) and false otherwise */
  public boolean isSetProvince() {
    return this.province != null;
  }

  public void setProvinceIsSet(boolean value) {
    if (!value) {
      this.province = null;
    }
  }

  public String getCity() {
    return this.city;
  }

  public UserThrift setCity(String city) {
    this.city = city;
    return this;
  }

  public void unsetCity() {
    this.city = null;
  }

  /** Returns true if field city is set (has been assigned a value) and false otherwise */
  public boolean isSetCity() {
    return this.city != null;
  }

  public void setCityIsSet(boolean value) {
    if (!value) {
      this.city = null;
    }
  }

  public int getFollowerCount() {
    return this.followerCount;
  }

  public UserThrift setFollowerCount(int followerCount) {
    this.followerCount = followerCount;
    setFollowerCountIsSet(true);
    return this;
  }

  public void unsetFollowerCount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FOLLOWERCOUNT_ISSET_ID);
  }

  /** Returns true if field followerCount is set (has been assigned a value) and false otherwise */
  public boolean isSetFollowerCount() {
    return EncodingUtils.testBit(__isset_bitfield, __FOLLOWERCOUNT_ISSET_ID);
  }

  public void setFollowerCountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FOLLOWERCOUNT_ISSET_ID, value);
  }

  public int getFollowningCount() {
    return this.followningCount;
  }

  public UserThrift setFollowningCount(int followningCount) {
    this.followningCount = followningCount;
    setFollowningCountIsSet(true);
    return this;
  }

  public void unsetFollowningCount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FOLLOWNINGCOUNT_ISSET_ID);
  }

  /** Returns true if field followningCount is set (has been assigned a value) and false otherwise */
  public boolean isSetFollowningCount() {
    return EncodingUtils.testBit(__isset_bitfield, __FOLLOWNINGCOUNT_ISSET_ID);
  }

  public void setFollowningCountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FOLLOWNINGCOUNT_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((Integer)value);
      }
      break;

    case USERNAME:
      if (value == null) {
        unsetUsername();
      } else {
        setUsername((String)value);
      }
      break;

    case NICKNAME:
      if (value == null) {
        unsetNickname();
      } else {
        setNickname((String)value);
      }
      break;

    case PHONENUMBER:
      if (value == null) {
        unsetPhonenumber();
      } else {
        setPhonenumber((String)value);
      }
      break;

    case EMAIL:
      if (value == null) {
        unsetEmail();
      } else {
        setEmail((String)value);
      }
      break;

    case PASSWORD:
      if (value == null) {
        unsetPassword();
      } else {
        setPassword((String)value);
      }
      break;

    case REALNAME:
      if (value == null) {
        unsetRealname();
      } else {
        setRealname((String)value);
      }
      break;

    case SEX:
      if (value == null) {
        unsetSex();
      } else {
        setSex((Integer)value);
      }
      break;

    case BIRTHDAY:
      if (value == null) {
        unsetBirthday();
      } else {
        setBirthday((Long)value);
      }
      break;

    case LEVEL:
      if (value == null) {
        unsetLevel();
      } else {
        setLevel((Integer)value);
      }
      break;

    case NAME_AUTH:
      if (value == null) {
        unsetNameAuth();
      } else {
        setNameAuth((Integer)value);
      }
      break;

    case EMAIL_AUTH:
      if (value == null) {
        unsetEmailAuth();
      } else {
        setEmailAuth((Integer)value);
      }
      break;

    case PHONE_AUTH:
      if (value == null) {
        unsetPhoneAuth();
      } else {
        setPhoneAuth((Integer)value);
      }
      break;

    case STATUS:
      if (value == null) {
        unsetStatus();
      } else {
        setStatus((Integer)value);
      }
      break;

    case CREATE_TIME:
      if (value == null) {
        unsetCreateTime();
      } else {
        setCreateTime((Long)value);
      }
      break;

    case UPDATE_TIME:
      if (value == null) {
        unsetUpdateTime();
      } else {
        setUpdateTime((Long)value);
      }
      break;

    case AVATAR_URL:
      if (value == null) {
        unsetAvatarUrl();
      } else {
        setAvatarUrl((String)value);
      }
      break;

    case SIGNATURE:
      if (value == null) {
        unsetSignature();
      } else {
        setSignature((String)value);
      }
      break;

    case PROVINCE:
      if (value == null) {
        unsetProvince();
      } else {
        setProvince((String)value);
      }
      break;

    case CITY:
      if (value == null) {
        unsetCity();
      } else {
        setCity((String)value);
      }
      break;

    case FOLLOWER_COUNT:
      if (value == null) {
        unsetFollowerCount();
      } else {
        setFollowerCount((Integer)value);
      }
      break;

    case FOLLOWNING_COUNT:
      if (value == null) {
        unsetFollowningCount();
      } else {
        setFollowningCount((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return Integer.valueOf(getId());

    case USERNAME:
      return getUsername();

    case NICKNAME:
      return getNickname();

    case PHONENUMBER:
      return getPhonenumber();

    case EMAIL:
      return getEmail();

    case PASSWORD:
      return getPassword();

    case REALNAME:
      return getRealname();

    case SEX:
      return Integer.valueOf(getSex());

    case BIRTHDAY:
      return Long.valueOf(getBirthday());

    case LEVEL:
      return Integer.valueOf(getLevel());

    case NAME_AUTH:
      return Integer.valueOf(getNameAuth());

    case EMAIL_AUTH:
      return Integer.valueOf(getEmailAuth());

    case PHONE_AUTH:
      return Integer.valueOf(getPhoneAuth());

    case STATUS:
      return Integer.valueOf(getStatus());

    case CREATE_TIME:
      return Long.valueOf(getCreateTime());

    case UPDATE_TIME:
      return Long.valueOf(getUpdateTime());

    case AVATAR_URL:
      return getAvatarUrl();

    case SIGNATURE:
      return getSignature();

    case PROVINCE:
      return getProvince();

    case CITY:
      return getCity();

    case FOLLOWER_COUNT:
      return Integer.valueOf(getFollowerCount());

    case FOLLOWNING_COUNT:
      return Integer.valueOf(getFollowningCount());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case USERNAME:
      return isSetUsername();
    case NICKNAME:
      return isSetNickname();
    case PHONENUMBER:
      return isSetPhonenumber();
    case EMAIL:
      return isSetEmail();
    case PASSWORD:
      return isSetPassword();
    case REALNAME:
      return isSetRealname();
    case SEX:
      return isSetSex();
    case BIRTHDAY:
      return isSetBirthday();
    case LEVEL:
      return isSetLevel();
    case NAME_AUTH:
      return isSetNameAuth();
    case EMAIL_AUTH:
      return isSetEmailAuth();
    case PHONE_AUTH:
      return isSetPhoneAuth();
    case STATUS:
      return isSetStatus();
    case CREATE_TIME:
      return isSetCreateTime();
    case UPDATE_TIME:
      return isSetUpdateTime();
    case AVATAR_URL:
      return isSetAvatarUrl();
    case SIGNATURE:
      return isSetSignature();
    case PROVINCE:
      return isSetProvince();
    case CITY:
      return isSetCity();
    case FOLLOWER_COUNT:
      return isSetFollowerCount();
    case FOLLOWNING_COUNT:
      return isSetFollowningCount();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof UserThrift)
      return this.equals((UserThrift)that);
    return false;
  }

  public boolean equals(UserThrift that) {
    if (that == null)
      return false;

    boolean this_present_id = true;
    boolean that_present_id = true;
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_username = true && this.isSetUsername();
    boolean that_present_username = true && that.isSetUsername();
    if (this_present_username || that_present_username) {
      if (!(this_present_username && that_present_username))
        return false;
      if (!this.username.equals(that.username))
        return false;
    }

    boolean this_present_nickname = true && this.isSetNickname();
    boolean that_present_nickname = true && that.isSetNickname();
    if (this_present_nickname || that_present_nickname) {
      if (!(this_present_nickname && that_present_nickname))
        return false;
      if (!this.nickname.equals(that.nickname))
        return false;
    }

    boolean this_present_phonenumber = true && this.isSetPhonenumber();
    boolean that_present_phonenumber = true && that.isSetPhonenumber();
    if (this_present_phonenumber || that_present_phonenumber) {
      if (!(this_present_phonenumber && that_present_phonenumber))
        return false;
      if (!this.phonenumber.equals(that.phonenumber))
        return false;
    }

    boolean this_present_email = true && this.isSetEmail();
    boolean that_present_email = true && that.isSetEmail();
    if (this_present_email || that_present_email) {
      if (!(this_present_email && that_present_email))
        return false;
      if (!this.email.equals(that.email))
        return false;
    }

    boolean this_present_password = true && this.isSetPassword();
    boolean that_present_password = true && that.isSetPassword();
    if (this_present_password || that_present_password) {
      if (!(this_present_password && that_present_password))
        return false;
      if (!this.password.equals(that.password))
        return false;
    }

    boolean this_present_realname = true && this.isSetRealname();
    boolean that_present_realname = true && that.isSetRealname();
    if (this_present_realname || that_present_realname) {
      if (!(this_present_realname && that_present_realname))
        return false;
      if (!this.realname.equals(that.realname))
        return false;
    }

    boolean this_present_sex = true;
    boolean that_present_sex = true;
    if (this_present_sex || that_present_sex) {
      if (!(this_present_sex && that_present_sex))
        return false;
      if (this.sex != that.sex)
        return false;
    }

    boolean this_present_birthday = true;
    boolean that_present_birthday = true;
    if (this_present_birthday || that_present_birthday) {
      if (!(this_present_birthday && that_present_birthday))
        return false;
      if (this.birthday != that.birthday)
        return false;
    }

    boolean this_present_level = true;
    boolean that_present_level = true;
    if (this_present_level || that_present_level) {
      if (!(this_present_level && that_present_level))
        return false;
      if (this.level != that.level)
        return false;
    }

    boolean this_present_nameAuth = true;
    boolean that_present_nameAuth = true;
    if (this_present_nameAuth || that_present_nameAuth) {
      if (!(this_present_nameAuth && that_present_nameAuth))
        return false;
      if (this.nameAuth != that.nameAuth)
        return false;
    }

    boolean this_present_emailAuth = true;
    boolean that_present_emailAuth = true;
    if (this_present_emailAuth || that_present_emailAuth) {
      if (!(this_present_emailAuth && that_present_emailAuth))
        return false;
      if (this.emailAuth != that.emailAuth)
        return false;
    }

    boolean this_present_phoneAuth = true;
    boolean that_present_phoneAuth = true;
    if (this_present_phoneAuth || that_present_phoneAuth) {
      if (!(this_present_phoneAuth && that_present_phoneAuth))
        return false;
      if (this.phoneAuth != that.phoneAuth)
        return false;
    }

    boolean this_present_status = true;
    boolean that_present_status = true;
    if (this_present_status || that_present_status) {
      if (!(this_present_status && that_present_status))
        return false;
      if (this.status != that.status)
        return false;
    }

    boolean this_present_createTime = true;
    boolean that_present_createTime = true;
    if (this_present_createTime || that_present_createTime) {
      if (!(this_present_createTime && that_present_createTime))
        return false;
      if (this.createTime != that.createTime)
        return false;
    }

    boolean this_present_updateTime = true;
    boolean that_present_updateTime = true;
    if (this_present_updateTime || that_present_updateTime) {
      if (!(this_present_updateTime && that_present_updateTime))
        return false;
      if (this.updateTime != that.updateTime)
        return false;
    }

    boolean this_present_avatarUrl = true && this.isSetAvatarUrl();
    boolean that_present_avatarUrl = true && that.isSetAvatarUrl();
    if (this_present_avatarUrl || that_present_avatarUrl) {
      if (!(this_present_avatarUrl && that_present_avatarUrl))
        return false;
      if (!this.avatarUrl.equals(that.avatarUrl))
        return false;
    }

    boolean this_present_signature = true && this.isSetSignature();
    boolean that_present_signature = true && that.isSetSignature();
    if (this_present_signature || that_present_signature) {
      if (!(this_present_signature && that_present_signature))
        return false;
      if (!this.signature.equals(that.signature))
        return false;
    }

    boolean this_present_province = true && this.isSetProvince();
    boolean that_present_province = true && that.isSetProvince();
    if (this_present_province || that_present_province) {
      if (!(this_present_province && that_present_province))
        return false;
      if (!this.province.equals(that.province))
        return false;
    }

    boolean this_present_city = true && this.isSetCity();
    boolean that_present_city = true && that.isSetCity();
    if (this_present_city || that_present_city) {
      if (!(this_present_city && that_present_city))
        return false;
      if (!this.city.equals(that.city))
        return false;
    }

    boolean this_present_followerCount = true;
    boolean that_present_followerCount = true;
    if (this_present_followerCount || that_present_followerCount) {
      if (!(this_present_followerCount && that_present_followerCount))
        return false;
      if (this.followerCount != that.followerCount)
        return false;
    }

    boolean this_present_followningCount = true;
    boolean that_present_followningCount = true;
    if (this_present_followningCount || that_present_followningCount) {
      if (!(this_present_followningCount && that_present_followningCount))
        return false;
      if (this.followningCount != that.followningCount)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(UserThrift other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    UserThrift typedOther = (UserThrift)other;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(typedOther.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, typedOther.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUsername()).compareTo(typedOther.isSetUsername());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUsername()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.username, typedOther.username);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNickname()).compareTo(typedOther.isSetNickname());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNickname()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nickname, typedOther.nickname);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPhonenumber()).compareTo(typedOther.isSetPhonenumber());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPhonenumber()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.phonenumber, typedOther.phonenumber);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEmail()).compareTo(typedOther.isSetEmail());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEmail()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.email, typedOther.email);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPassword()).compareTo(typedOther.isSetPassword());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPassword()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.password, typedOther.password);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRealname()).compareTo(typedOther.isSetRealname());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRealname()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.realname, typedOther.realname);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSex()).compareTo(typedOther.isSetSex());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSex()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sex, typedOther.sex);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBirthday()).compareTo(typedOther.isSetBirthday());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBirthday()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.birthday, typedOther.birthday);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLevel()).compareTo(typedOther.isSetLevel());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLevel()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.level, typedOther.level);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNameAuth()).compareTo(typedOther.isSetNameAuth());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNameAuth()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nameAuth, typedOther.nameAuth);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEmailAuth()).compareTo(typedOther.isSetEmailAuth());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEmailAuth()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.emailAuth, typedOther.emailAuth);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPhoneAuth()).compareTo(typedOther.isSetPhoneAuth());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPhoneAuth()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.phoneAuth, typedOther.phoneAuth);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStatus()).compareTo(typedOther.isSetStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, typedOther.status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreateTime()).compareTo(typedOther.isSetCreateTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreateTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createTime, typedOther.createTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUpdateTime()).compareTo(typedOther.isSetUpdateTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUpdateTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.updateTime, typedOther.updateTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAvatarUrl()).compareTo(typedOther.isSetAvatarUrl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAvatarUrl()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.avatarUrl, typedOther.avatarUrl);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSignature()).compareTo(typedOther.isSetSignature());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSignature()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.signature, typedOther.signature);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProvince()).compareTo(typedOther.isSetProvince());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProvince()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.province, typedOther.province);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCity()).compareTo(typedOther.isSetCity());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCity()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.city, typedOther.city);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFollowerCount()).compareTo(typedOther.isSetFollowerCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFollowerCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.followerCount, typedOther.followerCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFollowningCount()).compareTo(typedOther.isSetFollowningCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFollowningCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.followningCount, typedOther.followningCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("UserThrift(");
    boolean first = true;

    sb.append("id:");
    sb.append(this.id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("username:");
    if (this.username == null) {
      sb.append("null");
    } else {
      sb.append(this.username);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("nickname:");
    if (this.nickname == null) {
      sb.append("null");
    } else {
      sb.append(this.nickname);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("phonenumber:");
    if (this.phonenumber == null) {
      sb.append("null");
    } else {
      sb.append(this.phonenumber);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("email:");
    if (this.email == null) {
      sb.append("null");
    } else {
      sb.append(this.email);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("password:");
    if (this.password == null) {
      sb.append("null");
    } else {
      sb.append(this.password);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("realname:");
    if (this.realname == null) {
      sb.append("null");
    } else {
      sb.append(this.realname);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("sex:");
    sb.append(this.sex);
    first = false;
    if (!first) sb.append(", ");
    sb.append("birthday:");
    sb.append(this.birthday);
    first = false;
    if (!first) sb.append(", ");
    sb.append("level:");
    sb.append(this.level);
    first = false;
    if (!first) sb.append(", ");
    sb.append("nameAuth:");
    sb.append(this.nameAuth);
    first = false;
    if (!first) sb.append(", ");
    sb.append("emailAuth:");
    sb.append(this.emailAuth);
    first = false;
    if (!first) sb.append(", ");
    sb.append("phoneAuth:");
    sb.append(this.phoneAuth);
    first = false;
    if (!first) sb.append(", ");
    sb.append("status:");
    sb.append(this.status);
    first = false;
    if (!first) sb.append(", ");
    sb.append("createTime:");
    sb.append(this.createTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("updateTime:");
    sb.append(this.updateTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("avatarUrl:");
    if (this.avatarUrl == null) {
      sb.append("null");
    } else {
      sb.append(this.avatarUrl);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("signature:");
    if (this.signature == null) {
      sb.append("null");
    } else {
      sb.append(this.signature);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("province:");
    if (this.province == null) {
      sb.append("null");
    } else {
      sb.append(this.province);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("city:");
    if (this.city == null) {
      sb.append("null");
    } else {
      sb.append(this.city);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("followerCount:");
    sb.append(this.followerCount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("followningCount:");
    sb.append(this.followningCount);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class UserThriftStandardSchemeFactory implements SchemeFactory {
    public UserThriftStandardScheme getScheme() {
      return new UserThriftStandardScheme();
    }
  }

  private static class UserThriftStandardScheme extends StandardScheme<UserThrift> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, UserThrift struct) throws TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.id = iprot.readI32();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // USERNAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.username = iprot.readString();
              struct.setUsernameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // NICKNAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.nickname = iprot.readString();
              struct.setNicknameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // PHONENUMBER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.phonenumber = iprot.readString();
              struct.setPhonenumberIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // EMAIL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.email = iprot.readString();
              struct.setEmailIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // PASSWORD
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.password = iprot.readString();
              struct.setPasswordIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // REALNAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.realname = iprot.readString();
              struct.setRealnameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // SEX
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.sex = iprot.readI32();
              struct.setSexIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // BIRTHDAY
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.birthday = iprot.readI64();
              struct.setBirthdayIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // LEVEL
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.level = iprot.readI32();
              struct.setLevelIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // NAME_AUTH
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.nameAuth = iprot.readI32();
              struct.setNameAuthIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // EMAIL_AUTH
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.emailAuth = iprot.readI32();
              struct.setEmailAuthIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // PHONE_AUTH
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.phoneAuth = iprot.readI32();
              struct.setPhoneAuthIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.status = iprot.readI32();
              struct.setStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // CREATE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.createTime = iprot.readI64();
              struct.setCreateTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // UPDATE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.updateTime = iprot.readI64();
              struct.setUpdateTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // AVATAR_URL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.avatarUrl = iprot.readString();
              struct.setAvatarUrlIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // SIGNATURE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.signature = iprot.readString();
              struct.setSignatureIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // PROVINCE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.province = iprot.readString();
              struct.setProvinceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // CITY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.city = iprot.readString();
              struct.setCityIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // FOLLOWER_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.followerCount = iprot.readI32();
              struct.setFollowerCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 22: // FOLLOWNING_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.followningCount = iprot.readI32();
              struct.setFollowningCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, UserThrift struct) throws TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(ID_FIELD_DESC);
      oprot.writeI32(struct.id);
      oprot.writeFieldEnd();
      if (struct.username != null) {
        oprot.writeFieldBegin(USERNAME_FIELD_DESC);
        oprot.writeString(struct.username);
        oprot.writeFieldEnd();
      }
      if (struct.nickname != null) {
        oprot.writeFieldBegin(NICKNAME_FIELD_DESC);
        oprot.writeString(struct.nickname);
        oprot.writeFieldEnd();
      }
      if (struct.phonenumber != null) {
        oprot.writeFieldBegin(PHONENUMBER_FIELD_DESC);
        oprot.writeString(struct.phonenumber);
        oprot.writeFieldEnd();
      }
      if (struct.email != null) {
        oprot.writeFieldBegin(EMAIL_FIELD_DESC);
        oprot.writeString(struct.email);
        oprot.writeFieldEnd();
      }
      if (struct.password != null) {
        oprot.writeFieldBegin(PASSWORD_FIELD_DESC);
        oprot.writeString(struct.password);
        oprot.writeFieldEnd();
      }
      if (struct.realname != null) {
        oprot.writeFieldBegin(REALNAME_FIELD_DESC);
        oprot.writeString(struct.realname);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(SEX_FIELD_DESC);
      oprot.writeI32(struct.sex);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(BIRTHDAY_FIELD_DESC);
      oprot.writeI64(struct.birthday);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(LEVEL_FIELD_DESC);
      oprot.writeI32(struct.level);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(NAME_AUTH_FIELD_DESC);
      oprot.writeI32(struct.nameAuth);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(EMAIL_AUTH_FIELD_DESC);
      oprot.writeI32(struct.emailAuth);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PHONE_AUTH_FIELD_DESC);
      oprot.writeI32(struct.phoneAuth);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(STATUS_FIELD_DESC);
      oprot.writeI32(struct.status);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CREATE_TIME_FIELD_DESC);
      oprot.writeI64(struct.createTime);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(UPDATE_TIME_FIELD_DESC);
      oprot.writeI64(struct.updateTime);
      oprot.writeFieldEnd();
      if (struct.avatarUrl != null) {
        oprot.writeFieldBegin(AVATAR_URL_FIELD_DESC);
        oprot.writeString(struct.avatarUrl);
        oprot.writeFieldEnd();
      }
      if (struct.signature != null) {
        oprot.writeFieldBegin(SIGNATURE_FIELD_DESC);
        oprot.writeString(struct.signature);
        oprot.writeFieldEnd();
      }
      if (struct.province != null) {
        oprot.writeFieldBegin(PROVINCE_FIELD_DESC);
        oprot.writeString(struct.province);
        oprot.writeFieldEnd();
      }
      if (struct.city != null) {
        oprot.writeFieldBegin(CITY_FIELD_DESC);
        oprot.writeString(struct.city);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(FOLLOWER_COUNT_FIELD_DESC);
      oprot.writeI32(struct.followerCount);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(FOLLOWNING_COUNT_FIELD_DESC);
      oprot.writeI32(struct.followningCount);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class UserThriftTupleSchemeFactory implements SchemeFactory {
    public UserThriftTupleScheme getScheme() {
      return new UserThriftTupleScheme();
    }
  }

  private static class UserThriftTupleScheme extends TupleScheme<UserThrift> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, UserThrift struct) throws TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetUsername()) {
        optionals.set(1);
      }
      if (struct.isSetNickname()) {
        optionals.set(2);
      }
      if (struct.isSetPhonenumber()) {
        optionals.set(3);
      }
      if (struct.isSetEmail()) {
        optionals.set(4);
      }
      if (struct.isSetPassword()) {
        optionals.set(5);
      }
      if (struct.isSetRealname()) {
        optionals.set(6);
      }
      if (struct.isSetSex()) {
        optionals.set(7);
      }
      if (struct.isSetBirthday()) {
        optionals.set(8);
      }
      if (struct.isSetLevel()) {
        optionals.set(9);
      }
      if (struct.isSetNameAuth()) {
        optionals.set(10);
      }
      if (struct.isSetEmailAuth()) {
        optionals.set(11);
      }
      if (struct.isSetPhoneAuth()) {
        optionals.set(12);
      }
      if (struct.isSetStatus()) {
        optionals.set(13);
      }
      if (struct.isSetCreateTime()) {
        optionals.set(14);
      }
      if (struct.isSetUpdateTime()) {
        optionals.set(15);
      }
      if (struct.isSetAvatarUrl()) {
        optionals.set(16);
      }
      if (struct.isSetSignature()) {
        optionals.set(17);
      }
      if (struct.isSetProvince()) {
        optionals.set(18);
      }
      if (struct.isSetCity()) {
        optionals.set(19);
      }
      if (struct.isSetFollowerCount()) {
        optionals.set(20);
      }
      if (struct.isSetFollowningCount()) {
        optionals.set(21);
      }
      oprot.writeBitSet(optionals, 22);
      if (struct.isSetId()) {
        oprot.writeI32(struct.id);
      }
      if (struct.isSetUsername()) {
        oprot.writeString(struct.username);
      }
      if (struct.isSetNickname()) {
        oprot.writeString(struct.nickname);
      }
      if (struct.isSetPhonenumber()) {
        oprot.writeString(struct.phonenumber);
      }
      if (struct.isSetEmail()) {
        oprot.writeString(struct.email);
      }
      if (struct.isSetPassword()) {
        oprot.writeString(struct.password);
      }
      if (struct.isSetRealname()) {
        oprot.writeString(struct.realname);
      }
      if (struct.isSetSex()) {
        oprot.writeI32(struct.sex);
      }
      if (struct.isSetBirthday()) {
        oprot.writeI64(struct.birthday);
      }
      if (struct.isSetLevel()) {
        oprot.writeI32(struct.level);
      }
      if (struct.isSetNameAuth()) {
        oprot.writeI32(struct.nameAuth);
      }
      if (struct.isSetEmailAuth()) {
        oprot.writeI32(struct.emailAuth);
      }
      if (struct.isSetPhoneAuth()) {
        oprot.writeI32(struct.phoneAuth);
      }
      if (struct.isSetStatus()) {
        oprot.writeI32(struct.status);
      }
      if (struct.isSetCreateTime()) {
        oprot.writeI64(struct.createTime);
      }
      if (struct.isSetUpdateTime()) {
        oprot.writeI64(struct.updateTime);
      }
      if (struct.isSetAvatarUrl()) {
        oprot.writeString(struct.avatarUrl);
      }
      if (struct.isSetSignature()) {
        oprot.writeString(struct.signature);
      }
      if (struct.isSetProvince()) {
        oprot.writeString(struct.province);
      }
      if (struct.isSetCity()) {
        oprot.writeString(struct.city);
      }
      if (struct.isSetFollowerCount()) {
        oprot.writeI32(struct.followerCount);
      }
      if (struct.isSetFollowningCount()) {
        oprot.writeI32(struct.followningCount);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, UserThrift struct) throws TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(22);
      if (incoming.get(0)) {
        struct.id = iprot.readI32();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.username = iprot.readString();
        struct.setUsernameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.nickname = iprot.readString();
        struct.setNicknameIsSet(true);
      }
      if (incoming.get(3)) {
        struct.phonenumber = iprot.readString();
        struct.setPhonenumberIsSet(true);
      }
      if (incoming.get(4)) {
        struct.email = iprot.readString();
        struct.setEmailIsSet(true);
      }
      if (incoming.get(5)) {
        struct.password = iprot.readString();
        struct.setPasswordIsSet(true);
      }
      if (incoming.get(6)) {
        struct.realname = iprot.readString();
        struct.setRealnameIsSet(true);
      }
      if (incoming.get(7)) {
        struct.sex = iprot.readI32();
        struct.setSexIsSet(true);
      }
      if (incoming.get(8)) {
        struct.birthday = iprot.readI64();
        struct.setBirthdayIsSet(true);
      }
      if (incoming.get(9)) {
        struct.level = iprot.readI32();
        struct.setLevelIsSet(true);
      }
      if (incoming.get(10)) {
        struct.nameAuth = iprot.readI32();
        struct.setNameAuthIsSet(true);
      }
      if (incoming.get(11)) {
        struct.emailAuth = iprot.readI32();
        struct.setEmailAuthIsSet(true);
      }
      if (incoming.get(12)) {
        struct.phoneAuth = iprot.readI32();
        struct.setPhoneAuthIsSet(true);
      }
      if (incoming.get(13)) {
        struct.status = iprot.readI32();
        struct.setStatusIsSet(true);
      }
      if (incoming.get(14)) {
        struct.createTime = iprot.readI64();
        struct.setCreateTimeIsSet(true);
      }
      if (incoming.get(15)) {
        struct.updateTime = iprot.readI64();
        struct.setUpdateTimeIsSet(true);
      }
      if (incoming.get(16)) {
        struct.avatarUrl = iprot.readString();
        struct.setAvatarUrlIsSet(true);
      }
      if (incoming.get(17)) {
        struct.signature = iprot.readString();
        struct.setSignatureIsSet(true);
      }
      if (incoming.get(18)) {
        struct.province = iprot.readString();
        struct.setProvinceIsSet(true);
      }
      if (incoming.get(19)) {
        struct.city = iprot.readString();
        struct.setCityIsSet(true);
      }
      if (incoming.get(20)) {
        struct.followerCount = iprot.readI32();
        struct.setFollowerCountIsSet(true);
      }
      if (incoming.get(21)) {
        struct.followningCount = iprot.readI32();
        struct.setFollowningCountIsSet(true);
      }
    }
  }

}

